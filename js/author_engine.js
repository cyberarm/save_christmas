/* Generated by Opal 0.11.4 */
Opal.modules["author_engine/game/common/parts/common"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module, $truthy = Opal.truthy;

  Opal.add_stubs(['$==', '$fps', '$instance', '$-', '$sqrt', '$+', '$*', '$round']);
  return (function($base, $super, $parent_nesting) {
    function $AuthorEngine(){};
    var self = $AuthorEngine = $klass($base, $super, 'AuthorEngine', $AuthorEngine);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      function $Part(){};
      var self = $Part = $klass($base, $super, 'Part', $Part);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var $Common, self = $Common = $module($base, 'Common');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Common_width_1, TMP_Common_height_2, TMP_Common_fps_3, TMP_Common_distance_4, TMP_Common_milliseconds_5;

        
        
        Opal.defn(self, '$width', TMP_Common_width_1 = function $$width() {
          var self = this;

          return 128
        }, TMP_Common_width_1.$$arity = 0);
        
        Opal.defn(self, '$height', TMP_Common_height_2 = function $$height() {
          var self = this;

          return 128
        }, TMP_Common_height_2.$$arity = 0);
        
        Opal.defn(self, '$fps', TMP_Common_fps_3 = function $$fps() {
          var self = this;

          if (Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$==']("opal")) {
            return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'AuthorEngine'), 'GameRunner').$instance().$fps()
            } else {
            return nil
          }
        }, TMP_Common_fps_3.$$arity = 0);
        
        Opal.defn(self, '$distance', TMP_Common_distance_4 = function $$distance(x1, y1, x2, y2) {
          var self = this, dx = nil, dy = nil;

          
          dx = $rb_minus(x2, x1);
          dy = $rb_minus(y2, y1);
          return Opal.const_get_relative($nesting, 'Math').$sqrt($rb_plus($rb_times(dx, dx), $rb_times(dy, dy)));
        }, TMP_Common_distance_4.$$arity = 4);
        
        Opal.defn(self, '$milliseconds', TMP_Common_milliseconds_5 = function $$milliseconds() {
          var $a, self = this;
          if (self.__initial_milliseconds == null) self.__initial_milliseconds = nil;

          if (Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$==']("opal")) {
            
            self.__initial_milliseconds = ($truthy($a = self.__initial_milliseconds) ? $a : performance.now());
            return $rb_minus(performance.now(), self.__initial_milliseconds).$round(3);
            } else {
            return nil
          }
        }, TMP_Common_milliseconds_5.$$arity = 0);
      })($nesting[0], $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["author_engine/game/common/parts/collision_detection"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module, $hash2 = Opal.hash2;

  Opal.add_stubs(['$box', '$colliding_edge', '$sprite_vs_sprite', '$sprite_vs_level', '$debug_draw_sprite', '$debug_draw_level', '$render_bounding_box']);
  return (function($base, $super, $parent_nesting) {
    function $AuthorEngine(){};
    var self = $AuthorEngine = $klass($base, $super, 'AuthorEngine', $AuthorEngine);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      function $Part(){};
      var self = $Part = $klass($base, $super, 'Part', $Part);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var $CollisionDetection, self = $CollisionDetection = $module($base, 'CollisionDetection');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_CollisionDetection_bounding_box_1, TMP_CollisionDetection_colliding_edge_2, TMP_CollisionDetection_sprite_vs_sprite_3, TMP_CollisionDetection_sprite_vs_level_4, TMP_CollisionDetection_draw_sprite_box_5, TMP_CollisionDetection_draw_level_boxes_6, TMP_CollisionDetection_render_bounding_box_7;

        
        
        Opal.defn(self, '$bounding_box', TMP_CollisionDetection_bounding_box_1 = function $$bounding_box(sprite_index) {
          var self = this;
          if (self.collision_detection == null) self.collision_detection = nil;

          return self.collision_detection.$box(sprite_index)
        }, TMP_CollisionDetection_bounding_box_1.$$arity = 1);
        
        Opal.defn(self, '$colliding_edge', TMP_CollisionDetection_colliding_edge_2 = function $$colliding_edge(sprite_index, sprite_x, sprite_y, target_sprite_index, target_x, target_y) {
          var self = this;
          if (self.collision_detection == null) self.collision_detection = nil;

          return self.collision_detection.$colliding_edge(sprite_index, sprite_x, sprite_y, target_sprite_index, target_x, target_y)
        }, TMP_CollisionDetection_colliding_edge_2.$$arity = 6);
        
        Opal.defn(self, '$sprite_vs_sprite', TMP_CollisionDetection_sprite_vs_sprite_3 = function $$sprite_vs_sprite(sprite_index, sprite_x, sprite_y, target_sprite_index, target_x, target_y) {
          var self = this;
          if (self.collision_detection == null) self.collision_detection = nil;

          return self.collision_detection.$sprite_vs_sprite(sprite_index, sprite_x, sprite_y, target_sprite_index, target_x, target_y)
        }, TMP_CollisionDetection_sprite_vs_sprite_3.$$arity = 6);
        
        Opal.defn(self, '$sprite_vs_level', TMP_CollisionDetection_sprite_vs_level_4 = function $$sprite_vs_level(sprite_index, sprite_x, sprite_y, level) {
          var self = this;
          if (self.collision_detection == null) self.collision_detection = nil;

          return self.collision_detection.$sprite_vs_level(sprite_index, sprite_x, sprite_y, level)
        }, TMP_CollisionDetection_sprite_vs_level_4.$$arity = 4);
        
        Opal.defn(self, '$draw_sprite_box', TMP_CollisionDetection_draw_sprite_box_5 = function $$draw_sprite_box(sprite_index, sprite_x, sprite_y) {
          var self = this;
          if (self.collision_detection == null) self.collision_detection = nil;

          return self.collision_detection.$debug_draw_sprite(sprite_index, sprite_x, sprite_y)
        }, TMP_CollisionDetection_draw_sprite_box_5.$$arity = 3);
        
        Opal.defn(self, '$draw_level_boxes', TMP_CollisionDetection_draw_level_boxes_6 = function $$draw_level_boxes(level_index) {
          var self = this;
          if (self.collision_detection == null) self.collision_detection = nil;

          return self.collision_detection.$debug_draw_level(level_index)
        }, TMP_CollisionDetection_draw_level_boxes_6.$$arity = 1);
        
        Opal.defn(self, '$render_bounding_box', TMP_CollisionDetection_render_bounding_box_7 = function $$render_bounding_box(sprite_index, box, sprite_x, sprite_y, edges, z) {
          var self = this;
          if (self.collision_detection == null) self.collision_detection = nil;

          if (edges == null) {
            edges = $hash2([], {});
          }
          if (z == null) {
            z = Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Float'), 'INFINITY');
          }
          return self.collision_detection.$render_bounding_box(sprite_index, box, sprite_x, sprite_y, edges, z)
        }, TMP_CollisionDetection_render_bounding_box_7.$$arity = -5);
      })($nesting[0], $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["author_engine/game/common/parts/colors"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module, $hash = Opal.hash, $truthy = Opal.truthy;

  Opal.add_stubs(['$new', '$rgb', '$dig', '$==', '$red', '$green', '$blue', '$to_s', '$<']);
  return (function($base, $super, $parent_nesting) {
    function $AuthorEngine(){};
    var self = $AuthorEngine = $klass($base, $super, 'AuthorEngine', $AuthorEngine);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      function $Part(){};
      var self = $Part = $klass($base, $super, 'Part', $Part);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var $Colors, self = $Colors = $module($base, 'Colors');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Colors_black_1, TMP_Colors_dark_blue_2, TMP_Colors_dark_purple_3, TMP_Colors_dark_green_4, TMP_Colors_brown_5, TMP_Colors_dark_gray_6, TMP_Colors_light_gray_7, TMP_Colors_white_8, TMP_Colors_red_9, TMP_Colors_orange_10, TMP_Colors_yellow_11, TMP_Colors_green_12, TMP_Colors_blue_13, TMP_Colors_indigo_14, TMP_Colors_pink_15, TMP_Colors_peach_16, TMP_Colors_rgb_17, TMP_Colors_xml_color_18;

        
        Opal.const_set($nesting[0], 'Color', Opal.const_get_relative($nesting, 'Struct').$new("red", "green", "blue"));
        Opal.const_set($nesting[0], 'COLORS', $hash(0, Opal.const_get_relative($nesting, 'Color').$new(0, 0, 0), 1, Opal.const_get_relative($nesting, 'Color').$new(29, 43, 83), 2, Opal.const_get_relative($nesting, 'Color').$new(126, 37, 83), 3, Opal.const_get_relative($nesting, 'Color').$new(0, 135, 81), 4, Opal.const_get_relative($nesting, 'Color').$new(171, 82, 54), 5, Opal.const_get_relative($nesting, 'Color').$new(95, 87, 79), 6, Opal.const_get_relative($nesting, 'Color').$new(194, 195, 199), 7, Opal.const_get_relative($nesting, 'Color').$new(255, 241, 232), 8, Opal.const_get_relative($nesting, 'Color').$new(255, 0, 77), 9, Opal.const_get_relative($nesting, 'Color').$new(255, 163, 0), 10, Opal.const_get_relative($nesting, 'Color').$new(225, 236, 39), 11, Opal.const_get_relative($nesting, 'Color').$new(0, 228, 54), 12, Opal.const_get_relative($nesting, 'Color').$new(41, 173, 255), 13, Opal.const_get_relative($nesting, 'Color').$new(131, 118, 156), 14, Opal.const_get_relative($nesting, 'Color').$new(225, 119, 168), 15, Opal.const_get_relative($nesting, 'Color').$new(255, 204, 170)));
        
        Opal.defn(self, '$black', TMP_Colors_black_1 = function $$black() {
          var self = this;

          return self.$rgb(Opal.const_get_relative($nesting, 'COLORS').$dig(0))
        }, TMP_Colors_black_1.$$arity = 0);
        
        Opal.defn(self, '$dark_blue', TMP_Colors_dark_blue_2 = function $$dark_blue() {
          var self = this;

          return self.$rgb(Opal.const_get_relative($nesting, 'COLORS').$dig(1))
        }, TMP_Colors_dark_blue_2.$$arity = 0);
        
        Opal.defn(self, '$dark_purple', TMP_Colors_dark_purple_3 = function $$dark_purple() {
          var self = this;

          return self.$rgb(Opal.const_get_relative($nesting, 'COLORS').$dig(2))
        }, TMP_Colors_dark_purple_3.$$arity = 0);
        
        Opal.defn(self, '$dark_green', TMP_Colors_dark_green_4 = function $$dark_green() {
          var self = this;

          return self.$rgb(Opal.const_get_relative($nesting, 'COLORS').$dig(3))
        }, TMP_Colors_dark_green_4.$$arity = 0);
        
        Opal.defn(self, '$brown', TMP_Colors_brown_5 = function $$brown() {
          var self = this;

          return self.$rgb(Opal.const_get_relative($nesting, 'COLORS').$dig(4))
        }, TMP_Colors_brown_5.$$arity = 0);
        
        Opal.defn(self, '$dark_gray', TMP_Colors_dark_gray_6 = function $$dark_gray() {
          var self = this;

          return self.$rgb(Opal.const_get_relative($nesting, 'COLORS').$dig(5))
        }, TMP_Colors_dark_gray_6.$$arity = 0);
        
        Opal.defn(self, '$light_gray', TMP_Colors_light_gray_7 = function $$light_gray() {
          var self = this;

          return self.$rgb(Opal.const_get_relative($nesting, 'COLORS').$dig(6))
        }, TMP_Colors_light_gray_7.$$arity = 0);
        
        Opal.defn(self, '$white', TMP_Colors_white_8 = function $$white() {
          var self = this;

          return self.$rgb(Opal.const_get_relative($nesting, 'COLORS').$dig(7))
        }, TMP_Colors_white_8.$$arity = 0);
        
        Opal.defn(self, '$red', TMP_Colors_red_9 = function $$red() {
          var self = this;

          return self.$rgb(Opal.const_get_relative($nesting, 'COLORS').$dig(8))
        }, TMP_Colors_red_9.$$arity = 0);
        
        Opal.defn(self, '$orange', TMP_Colors_orange_10 = function $$orange() {
          var self = this;

          return self.$rgb(Opal.const_get_relative($nesting, 'COLORS').$dig(9))
        }, TMP_Colors_orange_10.$$arity = 0);
        
        Opal.defn(self, '$yellow', TMP_Colors_yellow_11 = function $$yellow() {
          var self = this;

          return self.$rgb(Opal.const_get_relative($nesting, 'COLORS').$dig(10))
        }, TMP_Colors_yellow_11.$$arity = 0);
        
        Opal.defn(self, '$green', TMP_Colors_green_12 = function $$green() {
          var self = this;

          return self.$rgb(Opal.const_get_relative($nesting, 'COLORS').$dig(11))
        }, TMP_Colors_green_12.$$arity = 0);
        
        Opal.defn(self, '$blue', TMP_Colors_blue_13 = function $$blue() {
          var self = this;

          return self.$rgb(Opal.const_get_relative($nesting, 'COLORS').$dig(12))
        }, TMP_Colors_blue_13.$$arity = 0);
        
        Opal.defn(self, '$indigo', TMP_Colors_indigo_14 = function $$indigo() {
          var self = this;

          return self.$rgb(Opal.const_get_relative($nesting, 'COLORS').$dig(13))
        }, TMP_Colors_indigo_14.$$arity = 0);
        
        Opal.defn(self, '$pink', TMP_Colors_pink_15 = function $$pink() {
          var self = this;

          return self.$rgb(Opal.const_get_relative($nesting, 'COLORS').$dig(14))
        }, TMP_Colors_pink_15.$$arity = 0);
        
        Opal.defn(self, '$peach', TMP_Colors_peach_16 = function $$peach() {
          var self = this;

          return self.$rgb(Opal.const_get_relative($nesting, 'COLORS').$dig(15))
        }, TMP_Colors_peach_16.$$arity = 0);
        
        Opal.defn(self, '$rgb', TMP_Colors_rgb_17 = function $$rgb(color) {
          var self = this;

          if (Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$==']("opal")) {
            return "" + "rgb(" + (color.$red()) + ", " + (color.$green()) + ", " + (color.$blue()) + ")"
            } else {
            return nil
          }
        }, TMP_Colors_rgb_17.$$arity = 1);
        
        Opal.defn(self, '$xml_color', TMP_Colors_xml_color_18 = function $$xml_color(color) {
          var self = this, red = nil, green = nil, blue = nil;

          
          red = color.$red().$to_s(16);
          green = color.$green().$to_s(16);
          blue = color.$blue().$to_s(16);
          if ($truthy($rb_lt(color.$red(), 10))) {
            red = "" + "0" + (red)};
          if ($truthy($rb_lt(color.$green(), 10))) {
            green = "" + "0" + (green)};
          if ($truthy($rb_lt(color.$blue(), 10))) {
            blue = "" + "0" + (blue)};
          return "" + (red) + (green) + (blue);
        }, TMP_Colors_xml_color_18.$$arity = 1);
      })($nesting[0], $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["author_engine/game/opal/parts/graphics"] = function(Opal) {
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$sprites', '$instance', '$<=', '$/', '$[]', '$levels', '$raise', '$each', '$sprite', '$x', '$y', '$index', '$==', '$sprite=', '$-', '$call']);
  return (function($base, $super, $parent_nesting) {
    function $AuthorEngine(){};
    var self = $AuthorEngine = $klass($base, $super, 'AuthorEngine', $AuthorEngine);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      function $Part(){};
      var self = $Part = $klass($base, $super, 'Part', $Part);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var $OpalGraphics, self = $OpalGraphics = $module($base, 'OpalGraphics');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_OpalGraphics_rect_1, TMP_OpalGraphics_sprite_2, TMP_OpalGraphics_text_3, TMP_OpalGraphics_level_5, TMP_OpalGraphics_swap_7, TMP_OpalGraphics_translate_8, TMP_OpalGraphics_rotate_9;

        
        
        Opal.defn(self, '$rect', TMP_OpalGraphics_rect_1 = function $$rect(x, y, width, height, color, z) {
          var self = this;
          if (self.canvas_context == null) self.canvas_context = nil;

          if (x == null) {
            x = 0;
          }
          if (y == null) {
            y = 0;
          }
          if (width == null) {
            width = 1;
          }
          if (height == null) {
            height = 1;
          }
          if (color == null) {
            color = "white";
          }
          if (z == null) {
            z = 0;
          }
          
          self.canvas_context.fillStyle = color;
          self.canvas_context.fillRect(x, y, width, height);
          return nil;
        }, TMP_OpalGraphics_rect_1.$$arity = -1);
        
        Opal.defn(self, '$sprite', TMP_OpalGraphics_sprite_2 = function $$sprite(sprite_sheet_index, x, y, z, alpha) {
          var self = this, size = nil, sprites = nil;
          if (self.canvas_context == null) self.canvas_context = nil;

          if (x == null) {
            x = 0;
          }
          if (y == null) {
            y = 0;
          }
          if (z == null) {
            z = 0;
          }
          if (alpha == null) {
            alpha = 255;
          }
          
          size = 16;
          sprites = Opal.const_get_qualified(Opal.const_get_relative($nesting, 'AuthorEngine'), 'GameRunner').$instance().$sprites();
          self.canvas_context.save();
          if ($truthy($rb_le(alpha, 0))) {
            alpha = 0
            } else {
            alpha = $rb_divide(alpha, 255.0)
          };
          self.canvas_context.globalAlpha = alpha;
          self.canvas_context.drawImage(sprites['$[]'](sprite_sheet_index), x, y);
          return self.canvas_context.restore();
        }, TMP_OpalGraphics_sprite_2.$$arity = -2);
        
        Opal.defn(self, '$text', TMP_OpalGraphics_text_3 = function $$text(string, x, y, size, z, color) {
          var self = this, font = nil;
          if (self.canvas_context == null) self.canvas_context = nil;

          if (x == null) {
            x = 0;
          }
          if (y == null) {
            y = 0;
          }
          if (size == null) {
            size = 4;
          }
          if (z == null) {
            z = 0;
          }
          if (color == null) {
            color = "white";
          }
          
          font = "" + (size) + "px Connection, Consolas";
          self.canvas_context.font = font;
          self.canvas_context.fillStyle = color;
          self.canvas_context.textBaseline = "top";
          return self.canvas_context.fillText(string, x, y);
        }, TMP_OpalGraphics_text_3.$$arity = -2);
        
        Opal.defn(self, '$level', TMP_OpalGraphics_level_5 = function $$level(index, z) {
          var TMP_4, self = this, _level = nil;

          if (z == null) {
            z = 0;
          }
          
          _level = Opal.const_get_qualified(Opal.const_get_relative($nesting, 'AuthorEngine'), 'GameRunner').$instance().$levels()['$[]'](index);
          if ($truthy(_level)) {
            } else {
            self.$raise("" + "No level at '" + (index) + "'!")
          };
          return $send(_level, 'each', [], (TMP_4 = function(sprite){var self = TMP_4.$$s || this;
if (sprite == null) sprite = nil;
          return self.$sprite(sprite.$sprite(), sprite.$x(), sprite.$y(), z)}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4));
        }, TMP_OpalGraphics_level_5.$$arity = -2);
        
        Opal.defn(self, '$swap', TMP_OpalGraphics_swap_7 = function $$swap(level, current_sprite, replacement_sprite) {
          var TMP_6, self = this, _level = nil;

          
          _level = Opal.const_get_qualified(Opal.const_get_relative($nesting, 'AuthorEngine'), 'GameRunner').$instance().$levels()['$[]'](level);
          if ($truthy(_level)) {
            } else {
            self.$raise("" + "No level at '" + (self.$index()) + "'!")
          };
          if ($truthy(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'AuthorEngine'), 'GameRunner').$instance().$sprites()['$[]'](current_sprite))) {
            } else {
            self.$raise("" + "No sprite at '" + (current_sprite) + "'!")
          };
          if ($truthy(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'AuthorEngine'), 'GameRunner').$instance().$sprites()['$[]'](replacement_sprite))) {
            } else {
            self.$raise("" + "No sprite at '" + (replacement_sprite) + "'!")
          };
          return $send(_level, 'each', [], (TMP_6 = function(sprite){var self = TMP_6.$$s || this, $writer = nil;
if (sprite == null) sprite = nil;
          if (sprite.$sprite()['$=='](current_sprite)) {
              
              $writer = [replacement_sprite];
              $send(sprite, 'sprite=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];
              } else {
              return nil
            }}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6));
        }, TMP_OpalGraphics_swap_7.$$arity = 3);
        
        Opal.defn(self, '$translate', TMP_OpalGraphics_translate_8 = function $$translate(x, y) {
          var self = this, $iter = TMP_OpalGraphics_translate_8.$$p, block = $iter || nil;
          if (self.canvas_context == null) self.canvas_context = nil;

          if ($iter) TMP_OpalGraphics_translate_8.$$p = null;
          
          self.canvas_context.save();
          self.canvas_context.translate(x, y);
          if ($truthy(block)) {
            block.$call()};
          return self.canvas_context.restore();
        }, TMP_OpalGraphics_translate_8.$$arity = 2);
        
        Opal.defn(self, '$rotate', TMP_OpalGraphics_rotate_9 = function $$rotate(angle, x, y) {
          var self = this, $iter = TMP_OpalGraphics_rotate_9.$$p, block = $iter || nil;
          if (self.canvas_context == null) self.canvas_context = nil;

          if (x == null) {
            x = 0;
          }
          if (y == null) {
            y = 0;
          }
          if ($iter) TMP_OpalGraphics_rotate_9.$$p = null;
          
          self.canvas_context.save();
          self.canvas_context.translate(x, y);
          self.canvas_context.rotate(angle);
          if ($truthy(block)) {
            block.$call()};
          return self.canvas_context.restore();
        }, TMP_OpalGraphics_rotate_9.$$arity = -2);
      })($nesting[0], $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["author_engine/game/opal/parts/input"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$dig', '$raise']);
  return (function($base, $super, $parent_nesting) {
    function $AuthorEngine(){};
    var self = $AuthorEngine = $klass($base, $super, 'AuthorEngine', $AuthorEngine);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      function $Part(){};
      var self = $Part = $klass($base, $super, 'Part', $Part);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var $OpalInput, self = $OpalInput = $module($base, 'OpalInput');

        var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_OpalInput_button$q_1;

        
        Opal.const_set($nesting[0], 'BUTTONS', $hash2(["left", "right", "up", "down", "x", "y"], {"left": "ArrowLeft", "right": "ArrowRight", "up": "ArrowUp", "down": "ArrowDown", "x": "x", "y": "c"}));
        Opal.const_set($nesting[0], 'KEY_STATES', $hash2([], {}));
        
        Opal.defn(self, '$button?', TMP_OpalInput_button$q_1 = function(name) {
          var self = this, down = nil;

          
          down = false;
          if ($truthy(Opal.const_get_relative($nesting, 'BUTTONS').$dig(name))) {
            down = Opal.const_get_relative($nesting, 'KEY_STATES').$dig(Opal.const_get_relative($nesting, 'BUTTONS').$dig(name))
            } else {
            self.$raise("" + "Button '" + (name) + "' not found!")
          };
          return down;
        }, TMP_OpalInput_button$q_1.$$arity = 1);
      })($nesting[0], $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["author_engine/collision_detection/collision_detection"] = function(Opal) {
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send;

  Opal.add_stubs(['$new', '$clear', '$!=', '$<<', '$bounding_box', '$[]', '$bounding_boxes_intersect?', '$box', '$each', '$sprite', '$x', '$y', '$*', '$+', '$width', '$-', '$height', '$/', '$>', '$-@', '$[]=', '$render_bounding_box', '$==', '$draw_line', '$private', '$<=', '$>=', '$canvas_context', '$game', '$instance', '$ord', '$times', '$solid_at?', '$<', '$x=', '$y=', '$width=', '$height=']);
  return (function($base, $super, $parent_nesting) {
    function $AuthorEngine(){};
    var self = $AuthorEngine = $klass($base, $super, 'AuthorEngine', $AuthorEngine);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      function $CollisionDetection(){};
      var self = $CollisionDetection = $klass($base, $super, 'CollisionDetection', $CollisionDetection);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_CollisionDetection_initialize_1, TMP_CollisionDetection_clear_2, TMP_CollisionDetection_add_sprite_3, TMP_CollisionDetection_add_level_4, TMP_CollisionDetection_box_5, TMP_CollisionDetection_sprite_vs_sprite_6, TMP_CollisionDetection_sprite_vs_level_8, TMP_CollisionDetection_colliding_edge_9, TMP_CollisionDetection_debug_draw_sprite_10, TMP_CollisionDetection_debug_draw_level_12, TMP_CollisionDetection_render_bounding_box_13, TMP_CollisionDetection_bounding_boxes_intersect$q_14, TMP_CollisionDetection_draw_line_15, TMP_CollisionDetection_solid_at$q_16, TMP_CollisionDetection_bounding_box_19;

      def.known_collisions = def.sprites = def.levels = nil;
      
      Opal.const_set($nesting[0], 'Color', Opal.const_get_relative($nesting, 'Struct').$new("red", "green", "blue", "alpha"));
      Opal.const_set($nesting[0], 'BoundingBox', Opal.const_get_relative($nesting, 'Struct').$new("x", "y", "width", "height"));
      
      Opal.defn(self, '$initialize', TMP_CollisionDetection_initialize_1 = function $$initialize(game_sprites, game_levels) {
        var self = this;

        
        self.game_sprites = game_sprites;
        self.game_levels = game_levels;
        self.sprites = [];
        self.levels = [];
        return (self.known_collisions = []);
      }, TMP_CollisionDetection_initialize_1.$$arity = 2);
      
      Opal.defn(self, '$clear', TMP_CollisionDetection_clear_2 = function $$clear() {
        var self = this;

        return self.known_collisions.$clear()
      }, TMP_CollisionDetection_clear_2.$$arity = 0);
      
      Opal.defn(self, '$add_sprite', TMP_CollisionDetection_add_sprite_3 = function $$add_sprite(image_or_blob) {
        var self = this, blob = nil;

        
        blob = nil;
        if ($truthy(Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$!=']("opal"))) {
          nil
          } else {
          
          blob = [];
          image_or_blob.forEach(function(value) {blob['$<<'](value)});
        };
        return self.sprites['$<<']($hash2(["blob", "box"], {"blob": blob, "box": self.$bounding_box(blob)}));
      }, TMP_CollisionDetection_add_sprite_3.$$arity = 1);
      
      Opal.defn(self, '$add_level', TMP_CollisionDetection_add_level_4 = function $$add_level(level_array) {
        var self = this;

        return self.levels['$<<'](level_array)
      }, TMP_CollisionDetection_add_level_4.$$arity = 1);
      
      Opal.defn(self, '$box', TMP_CollisionDetection_box_5 = function $$box(sprite_index) {
        var self = this;

        return self.sprites['$[]'](sprite_index)['$[]']("box")
      }, TMP_CollisionDetection_box_5.$$arity = 1);
      
      Opal.defn(self, '$sprite_vs_sprite', TMP_CollisionDetection_sprite_vs_sprite_6 = function $$sprite_vs_sprite(sprite_index, sprite_x, sprite_y, target_sprite_index, target_x, target_y) {
        var self = this;

        return self['$bounding_boxes_intersect?'](self.$box(sprite_index), sprite_x, sprite_y, self.$box(target_sprite_index), target_x, target_y)
      }, TMP_CollisionDetection_sprite_vs_sprite_6.$$arity = 6);
      
      Opal.defn(self, '$sprite_vs_level', TMP_CollisionDetection_sprite_vs_level_8 = function $$sprite_vs_level(sprite_index, sprite_x, sprite_y, level) {
        var TMP_7, self = this, detected = nil, collider = nil;

        
        detected = [];
        collider = self.$box(sprite_index);
        $send(self.levels['$[]'](level), 'each', [], (TMP_7 = function(sprite){var self = TMP_7.$$s || this;
if (sprite == null) sprite = nil;
        if ($truthy(self['$bounding_boxes_intersect?'](collider, sprite_x, sprite_y, self.$box(sprite.$sprite()), sprite.$x(), sprite.$y()))) {
            return detected['$<<'](sprite)
            } else {
            return nil
          }}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7));
        return detected;
      }, TMP_CollisionDetection_sprite_vs_level_8.$$arity = 4);
      
      Opal.defn(self, '$colliding_edge', TMP_CollisionDetection_colliding_edge_9 = function $$colliding_edge(sprite_index, sprite_x, sprite_y, target_sprite_index, target_x, target_y) {
        var self = this, sprite_box = nil, target_box = nil, edges = nil, wy = nil, hx = nil, $writer = nil;

        
        sprite_box = self.$box(sprite_index);
        target_box = self.$box(target_sprite_index);
        edges = $hash2(["top", "left", "right", "bottom"], {"top": false, "left": false, "right": false, "bottom": false});
        wy = $rb_times($rb_plus(sprite_box.$width(), target_box.$width()), $rb_minus($rb_minus(sprite_y, sprite_box.$height()), $rb_minus(target_y, $rb_divide(target_box.$height(), 2))));
        hx = $rb_times($rb_plus(sprite_box.$height(), target_box.$height()), $rb_minus($rb_minus(sprite_x, sprite_box.$width()), $rb_minus(target_x, $rb_divide(target_box.$height(), 2))));
        if ($truthy($rb_gt(wy, hx))) {
          if ($truthy($rb_gt(wy, hx['$-@']()))) {
            
            $writer = ["bottom", true];
            $send(edges, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
            } else {
            
            $writer = ["left", true];
            $send(edges, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
          }
        } else if ($truthy($rb_gt(wy, hx['$-@']()))) {
          
          $writer = ["right", true];
          $send(edges, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
          } else {
          
          $writer = ["top", true];
          $send(edges, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
        };
        return edges;
      }, TMP_CollisionDetection_colliding_edge_9.$$arity = 6);
      
      Opal.defn(self, '$debug_draw_sprite', TMP_CollisionDetection_debug_draw_sprite_10 = function $$debug_draw_sprite(sprite_index, sprite_x, sprite_y) {
        var self = this;

        return self.$render_bounding_box(sprite_index, self.$box(sprite_index), sprite_x, sprite_y)
      }, TMP_CollisionDetection_debug_draw_sprite_10.$$arity = 3);
      
      Opal.defn(self, '$debug_draw_level', TMP_CollisionDetection_debug_draw_level_12 = function $$debug_draw_level(level_index) {
        var TMP_11, self = this;

        return $send(self.levels['$[]'](level_index), 'each', [], (TMP_11 = function(sprite){var self = TMP_11.$$s || this;
if (sprite == null) sprite = nil;
        return self.$render_bounding_box(sprite.$sprite(), self.$box(sprite.$sprite()), sprite.$x(), sprite.$y())}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11))
      }, TMP_CollisionDetection_debug_draw_level_12.$$arity = 1);
      
      Opal.defn(self, '$render_bounding_box', TMP_CollisionDetection_render_bounding_box_13 = function $$render_bounding_box(sprite_index, box, sprite_x, sprite_y, edges, z, color, collision_color) {
        var self = this, paint_color = nil;

        if (edges == null) {
          edges = $hash2([], {});
        }
        if (z == null) {
          z = Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Float'), 'INFINITY');
        }
        if (color == null) {
          color = 3355508480;
        }
        if (collision_color == null) {
          collision_color = 3372155135;
        }
        
        if (Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$==']("opal")) {
          
          color = "green";
          collision_color = "purple";
          } else {
          nil
        };
        paint_color = color;
        if ($truthy(edges['$[]']("top"))) {
          paint_color = collision_color
          } else {
          paint_color = color
        };
        self.$draw_line($rb_plus(box.$x(), sprite_x), $rb_plus(box.$y(), sprite_y), $rb_plus($rb_plus(box.$x(), sprite_x), box.$width()), $rb_plus(box.$y(), sprite_y), paint_color, z);
        if ($truthy(edges['$[]']("right"))) {
          paint_color = collision_color
          } else {
          paint_color = color
        };
        self.$draw_line($rb_plus($rb_plus(box.$x(), sprite_x), box.$width()), $rb_plus(box.$y(), sprite_y), $rb_plus($rb_plus(box.$x(), sprite_x), box.$width()), $rb_plus($rb_plus(box.$y(), sprite_y), box.$height()), paint_color, z);
        if ($truthy(edges['$[]']("bottom"))) {
          paint_color = collision_color
          } else {
          paint_color = color
        };
        self.$draw_line($rb_plus($rb_plus(box.$x(), sprite_x), box.$width()), $rb_plus($rb_plus(box.$y(), sprite_y), box.$height()), $rb_plus(box.$x(), sprite_x), $rb_plus($rb_plus(box.$y(), sprite_y), box.$height()), paint_color, z);
        if ($truthy(edges['$[]']("left"))) {
          paint_color = collision_color
          } else {
          paint_color = color
        };
        return self.$draw_line($rb_plus(box.$x(), sprite_x), $rb_plus($rb_plus(box.$y(), sprite_y), box.$height()), $rb_plus(box.$x(), sprite_x), $rb_plus(box.$y(), sprite_y), paint_color, z);
      }, TMP_CollisionDetection_render_bounding_box_13.$$arity = -5);
      self.$private();
      
      Opal.defn(self, '$bounding_boxes_intersect?', TMP_CollisionDetection_bounding_boxes_intersect$q_14 = function(a, a_x, a_y, b, b_x, b_y) {
        var $a, $b, $c, self = this;

        return ($truthy($a = ($truthy($b = ($truthy($c = $rb_le($rb_plus(a.$x(), a_x), $rb_plus($rb_plus(b.$x(), b_x), b.$width()))) ? $rb_ge($rb_plus($rb_plus(a.$x(), a_x), a.$width()), $rb_plus(b.$x(), b_x)) : $c)) ? $rb_le($rb_plus(a.$y(), a_y), $rb_plus($rb_plus(b.$y(), b_y), b.$height())) : $b)) ? $rb_ge($rb_plus($rb_plus(a.$y(), a_y), a.$height()), $rb_plus(b.$y(), b_y)) : $a)
      }, TMP_CollisionDetection_bounding_boxes_intersect$q_14.$$arity = 6);
      
      Opal.defn(self, '$draw_line', TMP_CollisionDetection_draw_line_15 = function $$draw_line(x, y, x2, y2, color, z) {
        var self = this;

        if (z == null) {
          z = 0;
        }
        if (Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$==']("opal")) {
          
          Opal.const_get_qualified(Opal.const_get_relative($nesting, 'AuthorEngine'), 'GameRunner').$instance().$game().$canvas_context().strokeStyle = color;
          Opal.const_get_qualified(Opal.const_get_relative($nesting, 'AuthorEngine'), 'GameRunner').$instance().$game().$canvas_context().lineWidth = 1;
          Opal.const_get_qualified(Opal.const_get_relative($nesting, 'AuthorEngine'), 'GameRunner').$instance().$game().$canvas_context().beginPath();
          Opal.const_get_qualified(Opal.const_get_relative($nesting, 'AuthorEngine'), 'GameRunner').$instance().$game().$canvas_context().moveTo(x, y);
          Opal.const_get_qualified(Opal.const_get_relative($nesting, 'AuthorEngine'), 'GameRunner').$instance().$game().$canvas_context().lineTo(x2, y2);
          return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'AuthorEngine'), 'GameRunner').$instance().$game().$canvas_context().stroke();
          } else {
          return nil
        }
      }, TMP_CollisionDetection_draw_line_15.$$arity = -6);
      
      Opal.defn(self, '$solid_at?', TMP_CollisionDetection_solid_at$q_16 = function(blob, x, y) {
        var self = this, width = nil;

        
        width = 16;
        return blob['$[]']($rb_plus($rb_times($rb_plus($rb_times(y, width), x), 4), 3)).$ord();
      }, TMP_CollisionDetection_solid_at$q_16.$$arity = 3);
      return (Opal.defn(self, '$bounding_box', TMP_CollisionDetection_bounding_box_19 = function $$bounding_box(blob, size) {
        var TMP_17, self = this, box = nil, $writer = nil;

        if (size == null) {
          size = 16;
        }
        
        box = Opal.const_get_relative($nesting, 'BoundingBox').$new(size, size, 0, 0);
        $send(size, 'times', [], (TMP_17 = function(y){var self = TMP_17.$$s || this, TMP_18;
if (y == null) y = nil;
        return $send(size, 'times', [], (TMP_18 = function(x){var self = TMP_18.$$s || this, $writer = nil;
if (x == null) x = nil;
          if ($truthy($rb_gt(self['$solid_at?'](blob, x, y), 0))) {
              
              if ($truthy($rb_lt(x, box.$x()))) {
                
                $writer = [x];
                $send(box, 'x=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];};
              if ($truthy($rb_lt(y, box.$y()))) {
                
                $writer = [y];
                $send(box, 'y=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];};
              if ($truthy($rb_gt(x, box.$width()))) {
                
                $writer = [x];
                $send(box, 'width=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];};
              if ($truthy($rb_gt(y, box.$height()))) {
                
                $writer = [y];
                $send(box, 'height=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];
                } else {
                return nil
              };
              } else {
              return nil
            }}, TMP_18.$$s = self, TMP_18.$$arity = 1, TMP_18))}, TMP_17.$$s = self, TMP_17.$$arity = 1, TMP_17));
        
        $writer = [$rb_minus(box.$width(), box.$x())];
        $send(box, 'width=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [$rb_minus(box.$height(), box.$y())];
        $send(box, 'height=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [$rb_plus(box.$width(), 1)];
        $send(box, 'width=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [$rb_plus(box.$height(), 1)];
        $send(box, 'height=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return box;
      }, TMP_CollisionDetection_bounding_box_19.$$arity = -2), nil) && 'bounding_box';
    })($nesting[0], null, $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["author_engine/sprite"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$new']);
  return (function($base, $super, $parent_nesting) {
    function $AuthorEngine(){};
    var self = $AuthorEngine = $klass($base, $super, 'AuthorEngine', $AuthorEngine);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return Opal.const_set($nesting[0], 'Sprite', Opal.const_get_relative($nesting, 'Struct').$new("sprite", "x", "y", "z"))
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["author_engine/game/game"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$include', '$==', '$attr_accessor', '$!=', '$black', '$instance_eval', '$rect', '$width', '$height']);
  return (function($base, $super, $parent_nesting) {
    function $AuthorEngine(){};
    var self = $AuthorEngine = $klass($base, $super, 'AuthorEngine', $AuthorEngine);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      function $Game(){};
      var self = $Game = $klass($base, $super, 'Game', $Game);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Game_initialize_1, TMP_Game_draw_background_2, TMP_Game_init_3, TMP_Game_draw_4, TMP_Game_update_5;

      def.canvas = def.background_color = nil;
      
      self.$include(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'AuthorEngine'), 'Part'), 'Common'));
      self.$include(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'AuthorEngine'), 'Part'), 'CollisionDetection'));
      self.$include(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'AuthorEngine'), 'Part'), 'Colors'));
      if (Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$==']("opal")) {
        
        self.$include(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'AuthorEngine'), 'Part'), 'OpalGraphics'));
        self.$include(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'AuthorEngine'), 'Part'), 'OpalInput'));
        } else {
        nil
      };
      self.$attr_accessor("scale", "canvas", "canvas_context");
      self.$attr_accessor("collision_detection");
      
      Opal.defn(self, '$initialize', TMP_Game_initialize_1 = function $$initialize($kwargs) {
        var self = this, code;

        if ($kwargs == null || !$kwargs.$$is_hash) {
          if ($kwargs == null) {
            $kwargs = $hash2([], {});
          } else {
            throw Opal.ArgumentError.$new('expected kwargs');
          }
        }
        if (!Opal.hasOwnProperty.call($kwargs.$$smap, 'code')) {
          throw Opal.ArgumentError.$new('missing keyword: code');
        }
        code = $kwargs.$$smap["code"];
        
        if (Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$==']("opal")) {
          
          self.scale = 1.0;
          self.canvas = document.getElementById('canvas');
          self.canvas_context = self.canvas.getContext('2d');
          } else {
          nil
        };
        if ($truthy(Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$!=']("opal"))) {
          nil};
        self.background_color = self.$black();
        return self.$instance_eval(code);
      }, TMP_Game_initialize_1.$$arity = 1);
      
      Opal.defn(self, '$draw_background', TMP_Game_draw_background_2 = function $$draw_background() {
        var self = this;

        return self.$rect(0, 0, self.$width(), self.$height(), self.background_color)
      }, TMP_Game_draw_background_2.$$arity = 0);
      
      Opal.defn(self, '$init', TMP_Game_init_3 = function $$init() {
        var self = this;

        return nil
      }, TMP_Game_init_3.$$arity = 0);
      
      Opal.defn(self, '$draw', TMP_Game_draw_4 = function $$draw() {
        var self = this;

        return nil
      }, TMP_Game_draw_4.$$arity = 0);
      return (Opal.defn(self, '$update', TMP_Game_update_5 = function $$update() {
        var self = this;

        return nil
      }, TMP_Game_update_5.$$arity = 0), nil) && 'update';
    })($nesting[0], null, $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["author_engine/save_file"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$new', '$exists?', '$open', '$write', '$attr_reader', '$==', '$inflated?', '$save_code', '$save_spritesheet', '$save_levels', '$puts', '$file', '$load', '$read', '$include?', '$first', '$lines', '$basename', '$sub', '$expand_path', '$+', '$project_path', '$project_name', '$code', '$instance', '$save', '$width', '$height', '$unpack', '$to_blob', '$each_slice', '$chars', '$join', '$spritesheet', '$each', '$levels', '$map', '$sprite', '$x', '$y', '$z', '$strip', '$identify_mode', '$load_code', '$load_spritesheet', '$load_levels', '$!=', '$>', '$size', '$each_line', '$start_with?', '$last', '$split', '$to_i', '$scan', '$Integer', '$hex', '$<<', '$[]']);
  return (function($base, $super, $parent_nesting) {
    function $AuthorEngine(){};
    var self = $AuthorEngine = $klass($base, $super, 'AuthorEngine', $AuthorEngine);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      function $SaveFile(){};
      var self = $SaveFile = $klass($base, $super, 'SaveFile', $SaveFile);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_SaveFile_create_2, TMP_SaveFile_initialize_3, TMP_SaveFile_save_5, TMP_SaveFile_inflate$B_7, TMP_SaveFile_inflated$q_8, TMP_SaveFile_project_name_9, TMP_SaveFile_project_path_10, TMP_SaveFile_save_code_11, TMP_SaveFile_save_spritesheet_13, TMP_SaveFile_save_levels_16, TMP_SaveFile_load_18, TMP_SaveFile_identify_mode_19, TMP_SaveFile_load_code_21, TMP_SaveFile_load_spritesheet_24, TMP_SaveFile_load_levels_27;

      def.file = def.code = def.sprites = def.mode = def.buffer = nil;
      
      Opal.const_set($nesting[0], 'SpriteSheetData', Opal.const_get_relative($nesting, 'Struct').$new("columns", "rows", "to_blob"));
      Opal.defs(self, '$create', TMP_SaveFile_create_2 = function $$create(file) {
        var TMP_1, self = this;

        if ($truthy(Opal.const_get_relative($nesting, 'File')['$exists?'](file))) {
          return false
          } else {
          
          $send(Opal.const_get_relative($nesting, 'File'), 'open', [file, "w"], (TMP_1 = function(f){var self = TMP_1.$$s || this;
if (f == null) f = nil;
          return f.$write("")}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1));
          if ($truthy(Opal.const_get_relative($nesting, 'File')['$exists?'](file))) {
            return true
            } else {
            return false
          };
        }
      }, TMP_SaveFile_create_2.$$arity = 1);
      self.$attr_reader("file", "mode");
      self.$attr_reader("code", "sprites", "levels");
      
      Opal.defn(self, '$initialize', TMP_SaveFile_initialize_3 = function $$initialize(file) {
        var $a, self = this;

        
        self.file = file;
        self.buffer = "";
        self.mode = "compact";
        $a = [nil, nil, nil], (self.code = $a[0]), (self.sprites = $a[1]), (self.levels = $a[2]), $a;
        if (Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$==']("opal")) {
          return nil
          } else {
          return nil
        };
      }, TMP_SaveFile_initialize_3.$$arity = 1);
      
      Opal.defn(self, '$save', TMP_SaveFile_save_5 = function $$save() {
        var TMP_4, self = this;

        
        if ($truthy(self['$inflated?']())) {
          self.buffer = "# inflated\n"};
        self.$save_code();
        self.$save_spritesheet();
        self.$save_levels();
        $send(Opal.const_get_relative($nesting, 'File'), 'open', [self.file, "w"], (TMP_4 = function(f){var self = TMP_4.$$s || this;
          if (self.buffer == null) self.buffer = nil;
if (f == null) f = nil;
        return f.$write(self.buffer)}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4));
        self.buffer = "";
        return self.$puts("" + "Saved " + (self.$file()));
      }, TMP_SaveFile_save_5.$$arity = 0);
      
      Opal.defn(self, '$inflate!', TMP_SaveFile_inflate$B_7 = function() {
        var TMP_6, self = this, file = nil;

        
        self.$load();
        self.mode = "inflated";
        self.$save_code(self.code);
        self.$save_spritesheet(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Gosu'), 'Image').$new(self.sprites, $hash2(["retro"], {"retro": true})));
        file = Opal.const_get_relative($nesting, 'File').$read(self.file);
        if ($truthy(file.$lines().$first()['$include?']("# inflated"))) {
          return nil
          } else {
          return $send(Opal.const_get_relative($nesting, 'File'), 'open', [self.file, "w"], (TMP_6 = function(f){var self = TMP_6.$$s || this;
if (f == null) f = nil;
          
            f.$write("# inflated\n");
            return f.$write(file);}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6))
        };
      }, TMP_SaveFile_inflate$B_7.$$arity = 0);
      
      Opal.defn(self, '$inflated?', TMP_SaveFile_inflated$q_8 = function() {
        var self = this;

        return self.mode['$==']("inflated")
      }, TMP_SaveFile_inflated$q_8.$$arity = 0);
      
      Opal.defn(self, '$project_name', TMP_SaveFile_project_name_9 = function $$project_name() {
        var self = this;

        return Opal.const_get_relative($nesting, 'File').$basename(self.file, ".authorengine")
      }, TMP_SaveFile_project_name_9.$$arity = 0);
      
      Opal.defn(self, '$project_path', TMP_SaveFile_project_path_10 = function $$project_path() {
        var self = this;

        return Opal.const_get_relative($nesting, 'File').$expand_path(self.file).$sub(Opal.const_get_relative($nesting, 'File').$basename(self.file), "")
      }, TMP_SaveFile_project_path_10.$$arity = 0);
      
      Opal.defn(self, '$save_code', TMP_SaveFile_save_code_11 = function $$save_code(code) {
        var self = this;

        if (code == null) {
          code = Opal.const_get_relative($nesting, 'CodeEditor').$instance().$code();
        }
        
        if ($truthy(self['$inflated?']())) {
          
          self.buffer = $rb_plus(self.buffer, "" + "___CODE___?" + (self.$project_path()) + (self.$project_name()) + ".rb\n");
          Opal.const_get_relative($nesting, 'File').$write("" + (self.$project_path()) + (self.$project_name()) + ".rb", code);
          self.$puts("" + "Saved code to " + (self.$project_path()) + (self.$project_name()) + ".rb");
          } else {
          self.buffer = $rb_plus(self.buffer, "___CODE___\n")
        };
        return (self.buffer = $rb_plus(self.buffer, code));
      }, TMP_SaveFile_save_code_11.$$arity = -1);
      
      Opal.defn(self, '$save_spritesheet', TMP_SaveFile_save_spritesheet_13 = function $$save_spritesheet(sheet) {
        var TMP_12, self = this, pack = nil;

        if (sheet == null) {
          sheet = Opal.const_get_relative($nesting, 'SpriteEditor').$instance().$spritesheet();
        }
        
        if ($truthy(self['$inflated?']())) {
          
          self.buffer = $rb_plus(self.buffer, "" + "___SPRITES___?" + (self.$project_path()) + (self.$project_name()) + ".png\n");
          sheet.$save("" + (self.$project_path()) + (self.$project_name()) + ".png");
          self.$puts("" + "Saved spritesheet to " + (self.$project_path()) + (self.$project_name()) + ".png");
          } else {
          self.buffer = $rb_plus(self.buffer, "___SPRITES___\n")
        };
        self.buffer = $rb_plus(self.buffer, "" + (sheet.$width()) + "x" + (sheet.$height()));
        self.buffer = $rb_plus(self.buffer, "\n");
        pack = sheet.$to_blob().$unpack("H*").$first();
        $send(pack.$chars(), 'each_slice', [1024], (TMP_12 = function(slice){var self = TMP_12.$$s || this;
          if (self.buffer == null) self.buffer = nil;
if (slice == null) slice = nil;
        
          self.buffer = $rb_plus(self.buffer, slice.$join());
          return (self.buffer = $rb_plus(self.buffer, "\n"));}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12));
        return (self.buffer = $rb_plus(self.buffer, "\n"));
      }, TMP_SaveFile_save_spritesheet_13.$$arity = -1);
      
      Opal.defn(self, '$save_levels', TMP_SaveFile_save_levels_16 = function $$save_levels() {
        var TMP_14, self = this;

        
        self.buffer = $rb_plus(self.buffer, "___LEVELS___\n");
        $send(Opal.const_get_relative($nesting, 'LevelEditor').$instance().$levels(), 'each', [], (TMP_14 = function(level){var self = TMP_14.$$s || this, TMP_15;
          if (self.buffer == null) self.buffer = nil;
if (level == null) level = nil;
        return (self.buffer = $rb_plus(self.buffer, "" + ($send(level, 'map', [], (TMP_15 = function(s){var self = TMP_15.$$s || this;
if (s == null) s = nil;
          return "" + (s.$sprite()) + "," + (s.$x()) + "," + (s.$y()) + "," + (s.$z())}, TMP_15.$$s = self, TMP_15.$$arity = 1, TMP_15)).$join(",")) + "\n"))}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14));
        return self.buffer.$strip();
      }, TMP_SaveFile_save_levels_16.$$arity = 0);
      
      Opal.defn(self, '$load', TMP_SaveFile_load_18 = function $$load(from_file, data) {
        var TMP_17, self = this, string = nil;

        if (from_file == null) {
          from_file = true;
        }
        if (data == null) {
          data = nil;
        }
        
        string = "";
        if ($truthy(from_file)) {
          $send(Opal.const_get_relative($nesting, 'File'), 'open', [self.file, "r"], (TMP_17 = function(f){var self = TMP_17.$$s || this;
if (f == null) f = nil;
          return (string = f.$read())}, TMP_17.$$s = self, TMP_17.$$arity = 1, TMP_17))
          } else {
          string = data
        };
        self.$identify_mode(string);
        self.$load_code(string);
        self.$load_spritesheet(string);
        return self.$load_levels(string);
      }, TMP_SaveFile_load_18.$$arity = -1);
      
      Opal.defn(self, '$identify_mode', TMP_SaveFile_identify_mode_19 = function $$identify_mode(string) {
        var $a, $b, self = this;

        if ($truthy(($truthy($a = ($truthy($b = Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$!=']("opal")) ? $rb_gt(string.$lines().$size(), 0) : $b)) ? string.$lines().$first()['$include?']("# inflated") : $a))) {
          return (self.mode = "inflated")
          } else {
          return (self.mode = "compact")
        }
      }, TMP_SaveFile_identify_mode_19.$$arity = 1);
      
      Opal.defn(self, '$load_code', TMP_SaveFile_load_code_21 = function $$load_code(string) {
        var TMP_20, self = this, buffer = nil, in_code = nil;

        
        buffer = "";
        in_code = false;
        (function(){var $brk = Opal.new_brk(); try {return $send(string, 'each_line', [], (TMP_20 = function(line){var self = TMP_20.$$s || this, $a;
if (line == null) line = nil;
        
          if ($truthy(line['$start_with?']("___CODE___"))) {
            
            if ($truthy(($truthy($a = line.$strip()['$include?']("?")) ? self['$inflated?']() : $a))) {
              
              self.$puts("" + "Loading code from: " + (line.$strip().$split("?").$last()));
              buffer = Opal.const_get_relative($nesting, 'File').$read(line.$strip().$split("?").$last());
              
              Opal.brk(nil, $brk);};
            in_code = true;
            return nil;;};
          if ($truthy(($truthy($a = line['$start_with?']("___")) ? in_code : $a))) {
            
            Opal.brk(nil, $brk)};
          if ($truthy(in_code)) {
            return (buffer = $rb_plus(buffer, "" + (line)))
            } else {
            return nil
          };}, TMP_20.$$s = self, TMP_20.$$brk = $brk, TMP_20.$$arity = 1, TMP_20))
        } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
        return (self.code = buffer);
      }, TMP_SaveFile_load_code_21.$$arity = 1);
      
      Opal.defn(self, '$load_spritesheet', TMP_SaveFile_load_spritesheet_24 = function $$load_spritesheet(string) {
        var TMP_22, TMP_23, self = this, buffer = nil, width = nil, height = nil, in_sprites = nil, stream = nil;

        
        buffer = "";
        width = 0;
        height = 0;
        in_sprites = false;
        (function(){var $brk = Opal.new_brk(); try {return $send(string, 'each_line', [], (TMP_22 = function(line){var self = TMP_22.$$s || this, $a, image = nil, a = nil;
if (line == null) line = nil;
        
          if ($truthy(line.$strip()['$start_with?']("___SPRITES___"))) {
            
            if ($truthy(($truthy($a = line.$strip()['$include?']("?")) ? self['$inflated?']() : $a))) {
              
              self.$puts("" + "Loading spritesheet from: " + (line.$strip().$split("?").$last()));
              image = Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Gosu'), 'Image').$new(line.$strip().$split("?").$last(), $hash2(["retro"], {"retro": true}));
              buffer = image.$to_blob();
              $a = [image.$width(), image.$height()], (width = $a[0]), (height = $a[1]), $a;
              
              Opal.brk(nil, $brk);};
            in_sprites = true;
            return nil;;};
          if ($truthy(($truthy($a = line['$start_with?']("___")) ? in_sprites : $a))) {
            
            Opal.brk(nil, $brk)};
          if ($truthy(in_sprites)) {
            } else {
            return nil;
          };
          if ($truthy(line['$include?']("x"))) {
            
            a = line.$strip().$split("x");
            width = a.$first().$to_i();
            height = a.$last().$to_i();
            return nil;;};
          return (buffer = $rb_plus(buffer, line.$strip()));}, TMP_22.$$s = self, TMP_22.$$brk = $brk, TMP_22.$$arity = 1, TMP_22))
        } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
        stream = nil;
        if ($truthy(Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$!=']("opal"))) {
          nil
          } else {
          stream = $send(buffer.$scan(/../), 'map', [], (TMP_23 = function(x){var self = TMP_23.$$s || this;
if (x == null) x = nil;
          return self.$Integer(x.$hex())}, TMP_23.$$s = self, TMP_23.$$arity = 1, TMP_23))
        };
        return (self.sprites = Opal.const_get_relative($nesting, 'SpriteSheetData').$new(width, height, stream));
      }, TMP_SaveFile_load_spritesheet_24.$$arity = 1);
      return (Opal.defn(self, '$load_levels', TMP_SaveFile_load_levels_27 = function $$load_levels(string) {
        var TMP_25, self = this, levels = nil, in_level = nil;

        
        levels = [];
        in_level = false;
        (function(){var $brk = Opal.new_brk(); try {return $send(string, 'each_line', [], (TMP_25 = function(line){var self = TMP_25.$$s || this, $a, TMP_26, level = nil;
if (line == null) line = nil;
        
          if ($truthy(line['$start_with?']("___LEVELS___"))) {
            
            in_level = true;
            return nil;;};
          if ($truthy(($truthy($a = line['$start_with?']("___")) ? in_level : $a))) {
            
            Opal.brk(nil, $brk)};
          if ($truthy(in_level)) {
            
            level = [];
            $send(line.$strip().$split(","), 'each_slice', [4], (TMP_26 = function(sprite){var self = TMP_26.$$s || this;
if (sprite == null) sprite = nil;
            return level['$<<'](Opal.const_get_relative($nesting, 'Sprite').$new(self.$Integer(sprite['$[]'](0)), self.$Integer(sprite['$[]'](1)), self.$Integer(sprite['$[]'](2)), self.$Integer(sprite['$[]'](3))))}, TMP_26.$$s = self, TMP_26.$$arity = 1, TMP_26));
            return levels['$<<'](level);
            } else {
            return nil
          };}, TMP_25.$$s = self, TMP_25.$$brk = $brk, TMP_25.$$arity = 1, TMP_25))
        } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
        return (self.levels = levels);
      }, TMP_SaveFile_load_levels_27.$$arity = 1), nil) && 'load_levels';
    })($nesting[0], null, $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["author_engine/game/opal/touch_handler"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module, $hash2 = Opal.hash2, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$new', '$[]', '$x=', '$-', '$y=', '$copy_touch', '$[]=', '$trigger?', '$canvas', '$game', '$set_touch', '$handle_touch_end', '$delete']);
  return (function($base, $super, $parent_nesting) {
    function $AuthorEngine(){};
    var self = $AuthorEngine = $klass($base, $super, 'AuthorEngine', $AuthorEngine);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var $TouchHandler, self = $TouchHandler = $module($base, 'TouchHandler');

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_TouchHandler_touch_handler_setup_1, TMP_TouchHandler_copy_touch_2, TMP_TouchHandler_set_touch_3, TMP_TouchHandler_handle_touch_start_4, TMP_TouchHandler_handle_touch_move_5, TMP_TouchHandler_handle_touch_cancel_6, TMP_TouchHandler_handle_touch_end_7;

      
      Opal.const_set($nesting[0], 'Touch', Opal.const_get_relative($nesting, 'Struct').$new("origin_x", "origin_y", "x", "y"));
      
      Opal.defn(self, '$touch_handler_setup', TMP_TouchHandler_touch_handler_setup_1 = function $$touch_handler_setup() {
        var self = this;

        return (self.current_touches = $hash2([], {}))
      }, TMP_TouchHandler_touch_handler_setup_1.$$arity = 0);
      
      Opal.defn(self, '$copy_touch', TMP_TouchHandler_copy_touch_2 = function $$copy_touch(touch) {
        var self = this;

        return Opal.const_get_relative($nesting, 'Touch').$new(touch.pageX, touch.pageY, touch.pageX, touch.pageY)
      }, TMP_TouchHandler_copy_touch_2.$$arity = 1);
      
      Opal.defn(self, '$set_touch', TMP_TouchHandler_set_touch_3 = function $$set_touch(touch) {
        var self = this, struct = nil, $writer = nil;
        if (self.current_touches == null) self.current_touches = nil;

        
        struct = self.current_touches['$[]'](touch.identifier);
        
        $writer = [touch.pageX];
        $send(struct, 'x=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [touch.pageY];
        $send(struct, 'y=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return nil;
      }, TMP_TouchHandler_set_touch_3.$$arity = 1);
      
      Opal.defn(self, '$handle_touch_start', TMP_TouchHandler_handle_touch_start_4 = function $$handle_touch_start(event) {
        var $a, self = this, touches = nil, $writer = nil;
        if (self.current_touches == null) self.current_touches = nil;
        if (self.fullscreen_button == null) self.fullscreen_button = nil;
        if (self.game == null) self.game = nil;

        
        event.preventDefault();
        touches = event.changedTouches;
        for (var i = 0; i < touches.length; i++) {
        (($writer = [touches[i].identifier, self.$copy_touch(touches[i])]), $send(self.current_touches, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)])
      };
        if ($truthy(($truthy($a = self.fullscreen_button) ? self.fullscreen_button['$trigger?'](self.current_touches) : $a))) {
          if (document.fullscreenElement == null && self.game.$canvas().requestFullscreen) {
          self.$game().$canvas().requestFullscreen()
        } else if(document.fullscreenElement != null && document.exitFullscreen) {
          document.exitFullscreen()
        } };
        return nil;
      }, TMP_TouchHandler_handle_touch_start_4.$$arity = 1);
      
      Opal.defn(self, '$handle_touch_move', TMP_TouchHandler_handle_touch_move_5 = function $$handle_touch_move(event) {
        var self = this, touches = nil;

        
        event.preventDefault();
        touches = event.changedTouches;
        for (var i = 0; i < touches.length; i++) {
        self.$set_touch(touches[i])
      };
        return nil;
      }, TMP_TouchHandler_handle_touch_move_5.$$arity = 1);
      
      Opal.defn(self, '$handle_touch_cancel', TMP_TouchHandler_handle_touch_cancel_6 = function $$handle_touch_cancel(event) {
        var self = this;

        return self.$handle_touch_end(event)
      }, TMP_TouchHandler_handle_touch_cancel_6.$$arity = 1);
      
      Opal.defn(self, '$handle_touch_end', TMP_TouchHandler_handle_touch_end_7 = function $$handle_touch_end(event) {
        var self = this, touches = nil;
        if (self.current_touches == null) self.current_touches = nil;

        
        event.preventDefault();
        touches = event.changedTouches;
        for (var i = 0; i < touches.length; i++) {
        self.current_touches.$delete(touches[i].identifier)
      };
        return nil;
      }, TMP_TouchHandler_handle_touch_end_7.$$arity = 1);
    })($nesting[0], $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["author_engine/game/opal/touch_button"] = function(Opal) {
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send;

  Opal.add_stubs(['$attr_reader', '$game', '$instance', '$*', '$scale', '$/', '$==', '$-', '$+', '$raise', '$is_a?', '$canvas_context', '$detect', '$between?', '$x', '$y', '$active', '$inactive', '$call', '$[]', '$[]=']);
  return (function($base, $super, $parent_nesting) {
    function $AuthorEngine(){};
    var self = $AuthorEngine = $klass($base, $super, 'AuthorEngine', $AuthorEngine);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      function $TouchButton(){};
      var self = $TouchButton = $klass($base, $super, 'TouchButton', $TouchButton);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_TouchButton_initialize_1, TMP_TouchButton_draw_2, TMP_TouchButton_trigger$q_4, TMP_TouchButton_active_5, TMP_TouchButton_inactive_6;

      def.game = def.game_width = def.side = def.game_x = def.x = def.y = def.color = def.width = def.height = def.label = def.for_key = def.block = def.buttons = def.key_states = nil;
      
      self.$attr_reader("x", "y", "width", "height");
      
      Opal.defn(self, '$initialize', TMP_TouchButton_initialize_1 = function $$initialize($kwargs) {
        var $a, self = this, label, color, x, y, width, height, side, for_key, $iter = TMP_TouchButton_initialize_1.$$p, block = $iter || nil;

        if ($kwargs == null || !$kwargs.$$is_hash) {
          if ($kwargs == null) {
            $kwargs = $hash2([], {});
          } else {
            throw Opal.ArgumentError.$new('expected kwargs');
          }
        }
        if (!Opal.hasOwnProperty.call($kwargs.$$smap, 'label')) {
          throw Opal.ArgumentError.$new('missing keyword: label');
        }
        label = $kwargs.$$smap["label"];
        if (!Opal.hasOwnProperty.call($kwargs.$$smap, 'color')) {
          throw Opal.ArgumentError.$new('missing keyword: color');
        }
        color = $kwargs.$$smap["color"];
        if (!Opal.hasOwnProperty.call($kwargs.$$smap, 'x')) {
          throw Opal.ArgumentError.$new('missing keyword: x');
        }
        x = $kwargs.$$smap["x"];
        y = $kwargs.$$smap["y"];
        if (y == null) {
          y = nil
        }
        if (!Opal.hasOwnProperty.call($kwargs.$$smap, 'width')) {
          throw Opal.ArgumentError.$new('missing keyword: width');
        }
        width = $kwargs.$$smap["width"];
        if (!Opal.hasOwnProperty.call($kwargs.$$smap, 'height')) {
          throw Opal.ArgumentError.$new('missing keyword: height');
        }
        height = $kwargs.$$smap["height"];
        if (!Opal.hasOwnProperty.call($kwargs.$$smap, 'side')) {
          throw Opal.ArgumentError.$new('missing keyword: side');
        }
        side = $kwargs.$$smap["side"];
        for_key = $kwargs.$$smap["for_key"];
        if (for_key == null) {
          for_key = nil
        }
        if ($iter) TMP_TouchButton_initialize_1.$$p = null;
        
        $a = [label, color, x, y, width, height], (self.label = $a[0]), (self.color = $a[1]), (self.x = $a[2]), (self.y = $a[3]), (self.width = $a[4]), (self.height = $a[5]), $a;
        $a = [side, for_key], (self.side = $a[0]), (self.for_key = $a[1]), $a;
        self.block = block;
        self.buttons = Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'AuthorEngine'), 'Part'), 'OpalInput'), 'BUTTONS');
        self.key_states = Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'AuthorEngine'), 'Part'), 'OpalInput'), 'KEY_STATES');
        self.game = Opal.const_get_qualified(Opal.const_get_relative($nesting, 'AuthorEngine'), 'GameRunner').$instance().$game();
        self.game_width = $rb_times(128, self.game.$scale());
        self.game_x = window.innerWidth/2 - $rb_divide(self.game_width, 2);
        if (self.side['$==']("left")) {
          self.x = $rb_minus(self.game_x, self.x)
        } else if (self.side['$==']("right")) {
          self.x = $rb_plus($rb_plus(self.game_x, self.game_width), self.x)
          } else {
          self.$raise("side must be :left or :right")
        };
        if ($truthy(self.y['$is_a?'](Opal.const_get_relative($nesting, 'Numeric')))) {
          return nil
          } else {
          return (self.y = window.innerHeight/2 - $rb_divide(height, 2))
        };
      }, TMP_TouchButton_initialize_1.$$arity = 1);
      
      Opal.defn(self, '$draw', TMP_TouchButton_draw_2 = function $$draw() {
        var self = this, font = nil;

        
        self.game.$canvas_context().fillStyle = self.color;
        self.game.$canvas_context().fillRect(self.x, self.y, self.width, self.height);
        font = "" + (self.height) + "px Connection, Consolas";
        self.game.$canvas_context().font = font;
        self.game.$canvas_context().fillStyle = "white";
        self.game.$canvas_context().textBaseline = "top";
        return self.game.$canvas_context().fillText(self.label, self.x, self.y, self.width);
      }, TMP_TouchButton_draw_2.$$arity = 0);
      
      Opal.defn(self, '$trigger?', TMP_TouchButton_trigger$q_4 = function(touches) {
        var TMP_3, $a, self = this, triggered = nil;

        
        triggered = false;
        $send(touches, 'detect', [], (TMP_3 = function(id, touch){var self = TMP_3.$$s || this, $a;
          if (self.x == null) self.x = nil;
          if (self.width == null) self.width = nil;
          if (self.y == null) self.y = nil;
          if (self.height == null) self.height = nil;
if (id == null) id = nil;if (touch == null) touch = nil;
        if ($truthy(($truthy($a = touch.$x()['$between?'](self.x, $rb_plus(self.x, self.width))) ? touch.$y()['$between?'](self.y, $rb_plus(self.y, self.height)) : $a))) {
            return (triggered = true)
            } else {
            return nil
          }}, TMP_3.$$s = self, TMP_3.$$arity = 2, TMP_3));
        if ($truthy(self.for_key)) {
          
          if ($truthy(triggered)) {
            self.$active()};
          if ($truthy(triggered)) {
            } else {
            self.$inactive()
          };
        } else if ($truthy(($truthy($a = self.block) ? triggered : $a))) {
          self.block.$call()};
        return triggered;
      }, TMP_TouchButton_trigger$q_4.$$arity = 1);
      
      Opal.defn(self, '$active', TMP_TouchButton_active_5 = function $$active() {
        var self = this, $writer = nil;

        
        $writer = [self.buttons['$[]'](self.for_key), true];
        $send(self.key_states, '[]=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];
      }, TMP_TouchButton_active_5.$$arity = 0);
      return (Opal.defn(self, '$inactive', TMP_TouchButton_inactive_6 = function $$inactive() {
        var self = this, $writer = nil;

        
        $writer = [self.buttons['$[]'](self.for_key), false];
        $send(self.key_states, '[]=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];
      }, TMP_TouchButton_inactive_6.$$arity = 0), nil) && 'inactive';
    })($nesting[0], null, $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["author_engine/game/opal/touch_joystick"] = function(Opal) {
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $hash2 = Opal.hash2, $send = Opal.send;

  Opal.add_stubs(['$game', '$instance', '$*', '$scale', '$/', '$==', '$-', '$+', '$raise', '$is_a?', '$dark_gray', '$light_gray', '$canvas_context', '$<', '$distance', '$detect', '$circles_collide?', '$origin_x', '$origin_y', '$clamp', '$x', '$y', '$atan2', '$cos', '$sin', '$trigger_input', '$!=', '$-@', '$set', '$>', '$[]', '$[]=']);
  return (function($base, $super, $parent_nesting) {
    function $AuthorEngine(){};
    var self = $AuthorEngine = $klass($base, $super, 'AuthorEngine', $AuthorEngine);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      function $TouchJoystick(){};
      var self = $TouchJoystick = $klass($base, $super, 'TouchJoystick', $TouchJoystick);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_TouchJoystick_initialize_1, TMP_TouchJoystick_draw_2, TMP_TouchJoystick_circles_collide$q_3, TMP_TouchJoystick_update_5, TMP_TouchJoystick_trigger_input_6, TMP_TouchJoystick_set_7;

      def.game = def.game_width = def.side = def.game_x = def.x = def.y = def.color = def.background = def.radius = def.joystick_x = def.joystick_y = def.joystick_radius = def.buttons = def.key_states = nil;
      
      
      Opal.defn(self, '$initialize', TMP_TouchJoystick_initialize_1 = function $$initialize($kwargs) {
        var $a, self = this, x, y, radius, side, background, color;

        if ($kwargs == null || !$kwargs.$$is_hash) {
          if ($kwargs == null) {
            $kwargs = $hash2([], {});
          } else {
            throw Opal.ArgumentError.$new('expected kwargs');
          }
        }
        if (!Opal.hasOwnProperty.call($kwargs.$$smap, 'x')) {
          throw Opal.ArgumentError.$new('missing keyword: x');
        }
        x = $kwargs.$$smap["x"];
        y = $kwargs.$$smap["y"];
        if (y == null) {
          y = nil
        }
        if (!Opal.hasOwnProperty.call($kwargs.$$smap, 'radius')) {
          throw Opal.ArgumentError.$new('missing keyword: radius');
        }
        radius = $kwargs.$$smap["radius"];
        if (!Opal.hasOwnProperty.call($kwargs.$$smap, 'side')) {
          throw Opal.ArgumentError.$new('missing keyword: side');
        }
        side = $kwargs.$$smap["side"];
        background = $kwargs.$$smap["background"];
        if (background == null) {
          background = nil
        }
        color = $kwargs.$$smap["color"];
        if (color == null) {
          color = nil
        }
        
        $a = [x, y, radius, side, background, color], (self.x = $a[0]), (self.y = $a[1]), (self.radius = $a[2]), (self.side = $a[3]), (self.background = $a[4]), (self.color = $a[5]), $a;
        self.buttons = Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'AuthorEngine'), 'Part'), 'OpalInput'), 'BUTTONS');
        self.key_states = Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'AuthorEngine'), 'Part'), 'OpalInput'), 'KEY_STATES');
        self.game = Opal.const_get_qualified(Opal.const_get_relative($nesting, 'AuthorEngine'), 'GameRunner').$instance().$game();
        self.game_width = $rb_times(128, self.game.$scale());
        self.game_x = window.innerWidth/2 - $rb_divide(self.game_width, 2);
        if (self.side['$==']("left")) {
          self.x = $rb_minus(self.game_x, self.x)
        } else if (self.side['$==']("right")) {
          self.x = $rb_plus($rb_plus(self.game_x, self.game_width), self.x)
          } else {
          self.$raise("side must be :left or :right")
        };
        if ($truthy(self.y['$is_a?'](Opal.const_get_relative($nesting, 'Numeric')))) {
          } else {
          self.y = window.innerHeight/2
        };
        if ($truthy(self.color)) {
          } else {
          self.color = self.game.$dark_gray()
        };
        if ($truthy(self.background)) {
          } else {
          self.background = self.game.$light_gray()
        };
        return $a = [self.x, self.y, $rb_divide(self.radius, 2)], (self.joystick_x = $a[0]), (self.joystick_y = $a[1]), (self.joystick_radius = $a[2]), $a;
      }, TMP_TouchJoystick_initialize_1.$$arity = 1);
      
      Opal.defn(self, '$draw', TMP_TouchJoystick_draw_2 = function $$draw() {
        var self = this;

        
        self.game.$canvas_context().fillStyle = self.background;
        self.game.$canvas_context().beginPath();
        self.game.$canvas_context().arc(self.x, self.y, self.radius, 0, 2 * Math.PI);
        self.game.$canvas_context().fill();
        self.game.$canvas_context().beginPath();
        self.game.$canvas_context().fillStyle = self.color;
        self.game.$canvas_context().arc(self.joystick_x, self.joystick_y, self.joystick_radius, 0, 2 * Math.PI);
        self.game.$canvas_context().fill();
        return nil;
      }, TMP_TouchJoystick_draw_2.$$arity = 0);
      
      Opal.defn(self, '$circles_collide?', TMP_TouchJoystick_circles_collide$q_3 = function(x, y, radius, x2, y2, radius2) {
        var self = this, radii = nil;

        
        radii = $rb_plus(radius, radius2);
        if ($truthy($rb_lt(self.game.$distance(x, y, x2, y2), radii))) {
          return true
          } else {
          return false
        };
      }, TMP_TouchJoystick_circles_collide$q_3.$$arity = 6);
      
      Opal.defn(self, '$update', TMP_TouchJoystick_update_5 = function $$update(touches) {try {

        var TMP_4, self = this, touch_detected = nil;

        
        touch_detected = false;
        $send(touches, 'detect', [], (TMP_4 = function(id, touch){var self = TMP_4.$$s || this, _distance = nil, _direction = nil;
          if (self.x == null) self.x = nil;
          if (self.y == null) self.y = nil;
          if (self.radius == null) self.radius = nil;
          if (self.game == null) self.game = nil;
if (id == null) id = nil;if (touch == null) touch = nil;
        if ($truthy(self['$circles_collide?'](self.x, self.y, self.radius, touch.$origin_x(), touch.$origin_y(), 1))) {
            
            touch_detected = true;
            _distance = self.game.$distance(self.x, self.y, touch.$x(), touch.$y()).$clamp(0, self.radius);
            _direction = Opal.const_get_relative($nesting, 'Math').$atan2($rb_minus(touch.$y(), self.y), $rb_minus(touch.$x(), self.x));
            self.joystick_x = $rb_plus(self.x, $rb_times(_distance, Opal.const_get_relative($nesting, 'Math').$cos(_direction)));
            self.joystick_y = $rb_plus(self.y, $rb_times(_distance, Opal.const_get_relative($nesting, 'Math').$sin(_direction)));
            Opal.ret(true);
            } else {
            return nil
          }}, TMP_4.$$s = self, TMP_4.$$arity = 2, TMP_4));
        if ($truthy(touch_detected)) {
          } else {
          
          self.joystick_x = self.x;
          self.joystick_y = self.y;
        };
        self.$trigger_input();
        return nil;
        } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
      }, TMP_TouchJoystick_update_5.$$arity = 1);
      
      Opal.defn(self, '$trigger_input', TMP_TouchJoystick_trigger_input_6 = function $$trigger_input(threshold) {
        var $a, self = this;

        if (threshold == null) {
          threshold = 0.35;
        }
        
        threshold = $rb_times(self.radius, threshold);
        if ($truthy(($truthy($a = self.joystick_x['$!='](self.x)) ? $a : self.joystick_y['$!='](self.y)))) {
          
          if ($truthy($rb_lt($rb_minus(self.x, self.joystick_x), threshold['$-@']()))) {
            self.$set("right", true)
            } else {
            self.$set("right", false)
          };
          if ($truthy($rb_gt($rb_minus(self.x, self.joystick_x), threshold))) {
            self.$set("left", true)
            } else {
            self.$set("left", false)
          };
          if ($truthy($rb_lt($rb_minus(self.y, self.joystick_y), threshold['$-@']()))) {
            self.$set("down", true)
            } else {
            self.$set("down", false)
          };
          if ($truthy($rb_gt($rb_minus(self.y, self.joystick_y), threshold))) {
            return self.$set("up", true)
            } else {
            return self.$set("up", false)
          };
          } else {
          
          self.$set("up", false);
          self.$set("down", false);
          self.$set("left", false);
          return self.$set("right", false);
        };
      }, TMP_TouchJoystick_trigger_input_6.$$arity = -1);
      return (Opal.defn(self, '$set', TMP_TouchJoystick_set_7 = function $$set(key, boolean$) {
        var self = this, $writer = nil;

        
        $writer = [self.buttons['$[]'](key), boolean$];
        $send(self.key_states, '[]=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];
      }, TMP_TouchJoystick_set_7.$$arity = 2), nil) && 'set';
    })($nesting[0], null, $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["author_engine/game/opal/game_runner"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$include', '$attr_reader', '$instance=', '$-', '$new', '$load', '$levels', '$each', '$*', '$x', '$x=', '$y', '$y=', '$columns', '$sprites', '$rows', '$code', '$build_spritesheet_and_sprites_list', '$resize_canvas', '$collision_detection=', '$add_level', '$init', '$push', '$red', '$yellow', '$black', '$touch_handler_setup', '$draw_background', '$draw', '$update', '$run_game', '$canvas_context', '$+', '$>=', '$milliseconds', '$==', '$size', '$/', '$scale', '$draw_touch_controls', '$update_touch_controls', '$text', '$height', '$to_proc', '$trigger?', '$<', '$scale=', '$canvas', '$reposition_touch_controls', '$to_blob', '$load_sprites', '$times', '$add_sprite', '$[]=', '$handle_touch_start', '$handle_touch_move', '$handle_touch_cancel', '$handle_touch_end', '$fullscreen_changed']);
  return (function($base, $super, $parent_nesting) {
    function $AuthorEngine(){};
    var self = $AuthorEngine = $klass($base, $super, 'AuthorEngine', $AuthorEngine);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      function $GameRunner(){};
      var self = $GameRunner = $klass($base, $super, 'GameRunner', $GameRunner);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_GameRunner_instance_1, TMP_GameRunner_instance$eq_2, TMP_GameRunner_initialize_6, TMP_GameRunner_draw_7, TMP_GameRunner_update_8, TMP_GameRunner_run_game_9, TMP_GameRunner_draw_touch_controls_10, TMP_GameRunner_update_touch_controls_12, TMP_GameRunner_reposition_touch_controls_13, TMP_GameRunner_resize_canvas_14, TMP_GameRunner_build_spritesheet_and_sprites_list_15, TMP_GameRunner_load_sprites_18, TMP_GameRunner_fullscreen_changed_19, TMP_GameRunner_show_20;

      def.save_file = def.levels = def.sprites = def.collision_detection = def.game = def.touch_buttons = def.counted_frames = def.frame_count_stated_at = def.spritesheet_width = def.sprite_size = def.spritesheet_height = def.show_touch_controls = def.fullscreen_button = def.touch_joystick = def.current_touches = def.spritesheet = nil;
      
      Opal.defs(self, '$instance', TMP_GameRunner_instance_1 = function $$instance() {
        var self = this;
        if (self.instance == null) self.instance = nil;

        return self.instance
      }, TMP_GameRunner_instance_1.$$arity = 0);
      Opal.defs(self, '$instance=', TMP_GameRunner_instance$eq_2 = function(klass) {
        var self = this;

        return (self.instance = klass)
      }, TMP_GameRunner_instance$eq_2.$$arity = 1);
      self.$include(Opal.const_get_relative($nesting, 'TouchHandler'));
      self.$attr_reader("save_file", "spritesheet", "sprites", "levels", "fps");
      self.$attr_reader("game");
      
      Opal.defn(self, '$initialize', TMP_GameRunner_initialize_6 = function $$initialize(project_string) {
        var TMP_3, TMP_5, self = this, $writer = nil, size = nil;

        
        
        $writer = [self];
        $send(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'AuthorEngine'), 'GameRunner'), 'instance=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        self.save_file = Opal.const_get_qualified(Opal.const_get_relative($nesting, 'AuthorEngine'), 'SaveFile').$new(nil);
        self.save_file.$load(false, project_string);
        size = 16;
        self.levels = self.save_file.$levels();
        $send(self.levels, 'each', [], (TMP_3 = function(level){var self = TMP_3.$$s || this, TMP_4;
if (level == null) level = nil;
        return $send(level, 'each', [], (TMP_4 = function(sprite){var self = TMP_4.$$s || this;
if (sprite == null) sprite = nil;
          
            
            $writer = [$rb_times(sprite.$x(), size)];
            $send(sprite, 'x=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [$rb_times(sprite.$y(), size)];
            $send(sprite, 'y=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];;}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4))}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3));
        self.sprites = [];
        self.spritesheet = nil;
        self.spritesheet_width = self.save_file.$sprites().$columns();
        self.spritesheet_height = self.save_file.$sprites().$rows();
        self.sprite_size = 16;
        self.fps = 0;
        self.counted_frames = 0;
        self.frame_count_stated_at = 0;
        self.game = Opal.const_get_relative($nesting, 'Game').$new($hash2(["code"], {"code": self.save_file.$code()}));
        self.$build_spritesheet_and_sprites_list();
        self.$resize_canvas();
        self.collision_detection = Opal.const_get_qualified(Opal.const_get_relative($nesting, 'AuthorEngine'), 'CollisionDetection').$new(self.sprites, self.levels);
        
        $writer = [self.collision_detection];
        $send(self.game, 'collision_detection=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        $send(self.levels, 'each', [], (TMP_5 = function(level){var self = TMP_5.$$s || this;
          if (self.collision_detection == null) self.collision_detection = nil;
if (level == null) level = nil;
        return self.collision_detection.$add_level(level)}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5));
        self.game.$init();
        self.show_touch_controls = false;
        self.touch_joystick = Opal.const_get_relative($nesting, 'TouchJoystick').$new($hash2(["x", "radius", "side"], {"x": 100, "radius": 50, "side": "left"}));
        self.touch_buttons = [];
        self.touch_buttons.$push(Opal.const_get_relative($nesting, 'TouchButton').$new($hash2(["label", "color", "x", "width", "height", "side", "for_key"], {"label": "X", "color": self.game.$red(), "x": 50, "width": 50, "height": 50, "side": "right", "for_key": "x"})), Opal.const_get_relative($nesting, 'TouchButton').$new($hash2(["label", "color", "x", "width", "height", "side", "for_key"], {"label": "Y", "color": self.game.$yellow(), "x": 125, "width": 50, "height": 50, "side": "right", "for_key": "y"})));
        self.fullscreen_button = Opal.const_get_relative($nesting, 'TouchButton').$new($hash2(["label", "color", "x", "y", "width", "height", "side"], {"label": "Fullscreen", "color": self.game.$black(), "x": 50, "y": 10, "width": 100, "height": 50, "side": "right"}));
        self.$touch_handler_setup();
        return self;
      }, TMP_GameRunner_initialize_6.$$arity = 1);
      
      Opal.defn(self, '$draw', TMP_GameRunner_draw_7 = function $$draw() {
        var self = this;

        
        self.game.$draw_background();
        self.game.$draw();
        return nil;
      }, TMP_GameRunner_draw_7.$$arity = 0);
      
      Opal.defn(self, '$update', TMP_GameRunner_update_8 = function $$update() {
        var self = this;

        
        self.game.$update();
        return nil;
      }, TMP_GameRunner_update_8.$$arity = 0);
      
      Opal.defn(self, '$run_game', TMP_GameRunner_run_game_9 = function $$run_game() {
        var self = this, width = nil, region = nil;

        
        window.requestAnimationFrame(function() {self.$run_game()});
        self.game.$canvas_context().clearRect(0,0, window.innerWidth, window.innerHeight);
        self.game.$canvas_context().fillStyle = "#222";
        self.game.$canvas_context().fillRect(0,0, window.innerWidth, window.innerHeight);
        self.counted_frames = $rb_plus(self.counted_frames, 1);
        if ($truthy($rb_ge($rb_minus(self.game.$milliseconds(), self.frame_count_stated_at), 1000.0))) {
          
          self.fps = self.counted_frames;
          self.frame_count_stated_at = self.game.$milliseconds();
          self.counted_frames = 0;};
        if (self.sprites.$size()['$==']($rb_times($rb_divide(self.spritesheet_width, self.sprite_size), $rb_divide(self.spritesheet_height, self.sprite_size)))) {
          
          width = $rb_times(128, self.game.$scale());
          self.game.$canvas_context().save();
          self.game.$canvas_context().translate(window.innerWidth/2 - $rb_divide(width, 2), 0);
          self.game.$canvas_context().scale(self.game.$scale(), self.game.$scale());
          self.game.$canvas_context().save();
          region = new Path2D();
          region.rect(0, 0, 128, 128);
          self.game.$canvas_context().clip(region);
          self.game.$canvas_context().save();
          self.$draw();
          self.game.$canvas_context().restore();
          self.game.$canvas_context().restore();
          self.game.$canvas_context().restore();
          self.$update();
          if ($truthy(self.show_touch_controls)) {
            
            self.$draw_touch_controls();
            self.$update_touch_controls();};
          } else {
          
          self.game.$draw_background();
          self.game.$text("" + "Loading sprite " + (self.sprites.$size()) + "/" + ($rb_times($rb_divide(self.spritesheet_width, self.sprite_size), $rb_divide(self.spritesheet_height, self.sprite_size))) + ".", 0, $rb_divide(self.game.$height(), 2), 8);
        };
        return nil;
      }, TMP_GameRunner_run_game_9.$$arity = 0);
      
      Opal.defn(self, '$draw_touch_controls', TMP_GameRunner_draw_touch_controls_10 = function $$draw_touch_controls() {
        var self = this;

        
        self.fullscreen_button.$draw();
        $send(self.touch_buttons, 'each', [], "draw".$to_proc());
        return self.touch_joystick.$draw();
      }, TMP_GameRunner_draw_touch_controls_10.$$arity = 0);
      
      Opal.defn(self, '$update_touch_controls', TMP_GameRunner_update_touch_controls_12 = function $$update_touch_controls() {
        var TMP_11, self = this;

        
        $send(self.touch_buttons, 'each', [], (TMP_11 = function(button){var self = TMP_11.$$s || this;
          if (self.current_touches == null) self.current_touches = nil;
if (button == null) button = nil;
        return button['$trigger?'](self.current_touches)}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11));
        return self.touch_joystick.$update(self.current_touches);
      }, TMP_GameRunner_update_touch_controls_12.$$arity = 0);
      
      Opal.defn(self, '$reposition_touch_controls', TMP_GameRunner_reposition_touch_controls_13 = function $$reposition_touch_controls() {
        var self = this;

        return nil
      }, TMP_GameRunner_reposition_touch_controls_13.$$arity = 0);
      
      Opal.defn(self, '$resize_canvas', TMP_GameRunner_resize_canvas_14 = function $$resize_canvas() {
        var self = this, width = nil, height = nil, $writer = nil;

        
        width = window.innerWidth;
        height = window.innerHeight;
        if ($truthy($rb_lt(width, height))) {
          
          $writer = [window.innerWidth / 128.0];
          $send(self.game, 'scale=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
          } else {
          
          $writer = [window.innerHeight / 128.0];
          $send(self.game, 'scale=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
        };
        self.game.$canvas().width  = width;
        self.game.$canvas().height = height;
        self.game.$canvas().style.width  = width;
        self.game.$canvas().style.height = height;
        self.game.$canvas_context().imageSmoothingEnabled = false;
        self.$reposition_touch_controls();
        return nil;
      }, TMP_GameRunner_resize_canvas_14.$$arity = 0);
      
      Opal.defn(self, '$build_spritesheet_and_sprites_list', TMP_GameRunner_build_spritesheet_and_sprites_list_15 = function $$build_spritesheet_and_sprites_list() {
        var self = this, spritesheet_data = nil, width = nil, height = nil, size = nil, temp_canvas = nil, temp_canvas_context = nil, buffer = nil, image_data = nil;

        
        spritesheet_data = self.save_file.$sprites();
        width = spritesheet_data.$columns();
        height = spritesheet_data.$rows();
        size = 16;
        temp_canvas = document.createElement('canvas');
        temp_canvas_context = temp_canvas.getContext('2d');
        temp_canvas.width  = spritesheet_data.$columns();
        temp_canvas.height = spritesheet_data.$rows();
        buffer = new Uint8ClampedArray(spritesheet_data.$to_blob());
        image_data = new ImageData(buffer, width);
        temp_canvas_context.putImageData(image_data, 0, 0);
        self.spritesheet = new Image();
        self.spritesheet.onload = function() { self.$load_sprites() };
        return self.spritesheet.src = temp_canvas.toDataURL();
      }, TMP_GameRunner_build_spritesheet_and_sprites_list_15.$$arity = 0);
      
      Opal.defn(self, '$load_sprites', TMP_GameRunner_load_sprites_18 = function $$load_sprites() {
        var TMP_16, self = this, spritesheet_data = nil, width = nil, height = nil, size = nil, temp_canvas = nil, temp_canvas_context = nil;

        
        spritesheet_data = self.save_file.$sprites();
        width = spritesheet_data.$columns();
        height = spritesheet_data.$rows();
        size = 16;
        temp_canvas = document.createElement('canvas');
        temp_canvas_context = temp_canvas.getContext('2d');
        temp_canvas.width  = size;
        temp_canvas.height = size;
        $send($rb_divide(height, size), 'times', [], (TMP_16 = function(y){var self = TMP_16.$$s || this, TMP_17;
if (y == null) y = nil;
        return $send($rb_divide(width, size), 'times', [], (TMP_17 = function(x){var self = TMP_17.$$s || this;
            if (self.spritesheet == null) self.spritesheet = nil;
            if (self.collision_detection == null) self.collision_detection = nil;
            if (self.sprites == null) self.sprites = nil;
if (x == null) x = nil;
          
            temp_canvas_context.clearRect(0,0, size, size);
            temp_canvas_context.drawImage(self.spritesheet, $rb_times(x, size), $rb_times(y, size), size, size, 0, 0, size, size);
            self.collision_detection.$add_sprite(temp_canvas_context.getImageData(0,0, size, size).data);
            return createImageBitmap(self.spritesheet, $rb_times(x, size), $rb_times(y, size), size, size).then(sprite => { self.sprites.$push(sprite) });}, TMP_17.$$s = self, TMP_17.$$arity = 1, TMP_17))}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16));
        return nil;
      }, TMP_GameRunner_load_sprites_18.$$arity = 0);
      
      Opal.defn(self, '$fullscreen_changed', TMP_GameRunner_fullscreen_changed_19 = function $$fullscreen_changed() {
        var self = this;

        return self.$resize_canvas()
      }, TMP_GameRunner_fullscreen_changed_19.$$arity = 0);
      return (Opal.defn(self, '$show', TMP_GameRunner_show_20 = function $$show(update_interval) {
        var self = this, $writer = nil;

        if (update_interval == null) {
          update_interval = $rb_divide(1000.0, 60);
        }
        
        if (Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$==']("opal")) {
          } else {
          nil
        };
        window.addEventListener('resize', () => { self.$resize_canvas() });
        document.addEventListener('keydown', (event) => { ((self.show_touch_controls = false), (($writer = [event.key, true]), $send(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'AuthorEngine'), 'Part'), 'OpalInput'), 'KEY_STATES'), '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)])) });
        document.addEventListener('keyup',   (event) => { (($writer = [event.key, false]), $send(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'AuthorEngine'), 'Part'), 'OpalInput'), 'KEY_STATES'), '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]) });
        self.game.$canvas().addEventListener('touchstart',  (event) => { ((self.show_touch_controls = true), self.$handle_touch_start(event)) });
        self.game.$canvas().addEventListener('touchmove',   (event) => { self.$handle_touch_move(event) });
        self.game.$canvas().addEventListener('touchcancel', (event) => { self.$handle_touch_cancel(event) });
        self.game.$canvas().addEventListener('touchend',    (event) => { self.$handle_touch_end(event) });
        self.game.$canvas().addEventListener('fullscreenchange',    () => { self.$fullscreen_changed() });
        document.getElementById('loading').style.display = "none";
        window.requestAnimationFrame(function() {self.$run_game()});
        return nil;
      }, TMP_GameRunner_show_20.$$arity = -1), nil) && 'show';
    })($nesting[0], null, $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.4 */
Opal.modules["author_engine/opal"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$==']);
  
  if (Opal.const_get_relative($nesting, 'RUBY_ENGINE')['$==']("opal")) {
    } else {
    nil
  };
  self.$require("author_engine/opal"+ '/../' + "game/common/parts/common");
  self.$require("author_engine/opal"+ '/../' + "game/common/parts/collision_detection");
  self.$require("author_engine/opal"+ '/../' + "game/common/parts/colors");
  self.$require("author_engine/opal"+ '/../' + "game/opal/parts/graphics");
  self.$require("author_engine/opal"+ '/../' + "game/opal/parts/input");
  self.$require("author_engine/opal"+ '/../' + "collision_detection/collision_detection");
  self.$require("author_engine/opal"+ '/../' + "sprite");
  self.$require("author_engine/opal"+ '/../' + "game/game");
  self.$require("author_engine/opal"+ '/../' + "save_file");
  self.$require("author_engine/opal"+ '/../' + "game/opal/touch_handler");
  self.$require("author_engine/opal"+ '/../' + "game/opal/touch_button");
  self.$require("author_engine/opal"+ '/../' + "game/opal/touch_joystick");
  return self.$require("author_engine/opal"+ '/../' + "game/opal/game_runner");
};

/* Generated by Opal 0.11.4 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require', '$show', '$new']);
  
  self.$require("author_engine/opal");
  var callback = function(){
  Opal.const_get_qualified(Opal.const_get_relative($nesting, 'AuthorEngine'), 'GameRunner').$new(projectString).$show()
};

if (
    document.readyState === "complete" ||
    (document.readyState !== "loading" && !document.documentElement.doScroll)
) {
  callback();
} else {
  document.addEventListener("DOMContentLoaded", callback);
};
})(Opal);
