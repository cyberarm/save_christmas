// 0.7.0
/* Generated by Opal 1.0.0 */
Opal.modules["author_engine/game/common/parts/common"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module, $truthy = Opal.truthy;

  Opal.add_stubs(['$==', '$fps', '$instance', '$-', '$sqrt', '$+', '$*', '$levels']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'AuthorEngine');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Part');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Common');

        var $nesting = [self].concat($parent_nesting), $Common_width$1, $Common_height$2, $Common_fps$3, $Common_distance$4, $Common_levels$5, $Common_milliseconds$6;

        
        
        Opal.def(self, '$width', $Common_width$1 = function $$width() {
          var self = this;

          return 128
        }, $Common_width$1.$$arity = 0);
        
        Opal.def(self, '$height', $Common_height$2 = function $$height() {
          var self = this;

          return 128
        }, $Common_height$2.$$arity = 0);
        
        Opal.def(self, '$fps', $Common_fps$3 = function $$fps() {
          var self = this;

          if ($$($nesting, 'RUBY_ENGINE')['$==']("opal")) {
            return $$$($$($nesting, 'AuthorEngine'), 'GameRunner').$instance().$fps()
          } else {
            return nil
          }
        }, $Common_fps$3.$$arity = 0);
        
        Opal.def(self, '$distance', $Common_distance$4 = function $$distance(x1, y1, x2, y2) {
          var self = this, dx = nil, dy = nil;

          
          dx = $rb_minus(x2, x1);
          dy = $rb_minus(y2, y1);
          return $$($nesting, 'Math').$sqrt($rb_plus($rb_times(dx, dx), $rb_times(dy, dy)));
        }, $Common_distance$4.$$arity = 4);
        
        Opal.def(self, '$levels', $Common_levels$5 = function $$levels() {
          var self = this;
          if (self.authorengine_levels == null) self.authorengine_levels = nil;

          if ($truthy(self.authorengine_levels)) {
            return self.authorengine_levels
          } else {
            return $$$($$($nesting, 'AuthorEngine'), 'GameRunner').$instance().$levels()
          }
        }, $Common_levels$5.$$arity = 0);
        
        Opal.def(self, '$milliseconds', $Common_milliseconds$6 = function $$milliseconds() {
          var $a, self = this;
          if (self.__initial_milliseconds == null) self.__initial_milliseconds = nil;

          if ($$($nesting, 'RUBY_ENGINE')['$==']("opal")) {
            
            self.__initial_milliseconds = ($truthy($a = self.__initial_milliseconds) ? $a : performance.now());
            
            return $rb_minus(performance.now(), self.__initial_milliseconds);;
          } else {
            return nil
          }
        }, $Common_milliseconds$6.$$arity = 0);
      })($nesting[0], $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["author_engine/game/common/parts/collision_detection"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module, $hash2 = Opal.hash2;

  Opal.add_stubs(['$box', '$colliding_edge', '$sprite_vs_sprite', '$sprite_vs_level', '$debug_draw_sprite', '$debug_draw_level', '$render_bounding_box']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'AuthorEngine');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Part');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'CollisionDetection');

        var $nesting = [self].concat($parent_nesting), $CollisionDetection_bounding_box$1, $CollisionDetection_colliding_edge$2, $CollisionDetection_sprite_vs_sprite$3, $CollisionDetection_sprite_vs_level$4, $CollisionDetection_draw_sprite_box$5, $CollisionDetection_draw_level_boxes$6, $CollisionDetection_render_bounding_box$7;

        
        
        Opal.def(self, '$bounding_box', $CollisionDetection_bounding_box$1 = function $$bounding_box(sprite_index) {
          var self = this;
          if (self.authorengine_collision_detection == null) self.authorengine_collision_detection = nil;

          return self.authorengine_collision_detection.$box(sprite_index)
        }, $CollisionDetection_bounding_box$1.$$arity = 1);
        
        Opal.def(self, '$colliding_edge', $CollisionDetection_colliding_edge$2 = function $$colliding_edge(sprite_index, sprite_x, sprite_y, target_sprite_index, target_x, target_y) {
          var self = this;
          if (self.authorengine_collision_detection == null) self.authorengine_collision_detection = nil;

          return self.authorengine_collision_detection.$colliding_edge(sprite_index, sprite_x, sprite_y, target_sprite_index, target_x, target_y)
        }, $CollisionDetection_colliding_edge$2.$$arity = 6);
        
        Opal.def(self, '$sprite_vs_sprite', $CollisionDetection_sprite_vs_sprite$3 = function $$sprite_vs_sprite(sprite_index, sprite_x, sprite_y, target_sprite_index, target_x, target_y) {
          var self = this;
          if (self.authorengine_collision_detection == null) self.authorengine_collision_detection = nil;

          return self.authorengine_collision_detection.$sprite_vs_sprite(sprite_index, sprite_x, sprite_y, target_sprite_index, target_x, target_y)
        }, $CollisionDetection_sprite_vs_sprite$3.$$arity = 6);
        
        Opal.def(self, '$sprite_vs_level', $CollisionDetection_sprite_vs_level$4 = function $$sprite_vs_level(sprite_index, sprite_x, sprite_y, level) {
          var self = this;
          if (self.authorengine_collision_detection == null) self.authorengine_collision_detection = nil;

          return self.authorengine_collision_detection.$sprite_vs_level(sprite_index, sprite_x, sprite_y, level)
        }, $CollisionDetection_sprite_vs_level$4.$$arity = 4);
        
        Opal.def(self, '$draw_sprite_box', $CollisionDetection_draw_sprite_box$5 = function $$draw_sprite_box(sprite_index, sprite_x, sprite_y) {
          var self = this;
          if (self.authorengine_collision_detection == null) self.authorengine_collision_detection = nil;

          return self.authorengine_collision_detection.$debug_draw_sprite(sprite_index, sprite_x, sprite_y)
        }, $CollisionDetection_draw_sprite_box$5.$$arity = 3);
        
        Opal.def(self, '$draw_level_boxes', $CollisionDetection_draw_level_boxes$6 = function $$draw_level_boxes(level_index) {
          var self = this;
          if (self.authorengine_collision_detection == null) self.authorengine_collision_detection = nil;

          return self.authorengine_collision_detection.$debug_draw_level(level_index)
        }, $CollisionDetection_draw_level_boxes$6.$$arity = 1);
        
        Opal.def(self, '$render_bounding_box', $CollisionDetection_render_bounding_box$7 = function $$render_bounding_box(sprite_index, box, sprite_x, sprite_y, edges, z) {
          var self = this;
          if (self.authorengine_collision_detection == null) self.authorengine_collision_detection = nil;

          
          
          if (edges == null) {
            edges = $hash2([], {});
          };
          
          if (z == null) {
            z = $$$($$($nesting, 'Float'), 'INFINITY');
          };
          return self.authorengine_collision_detection.$render_bounding_box(sprite_index, box, sprite_x, sprite_y, edges, z);
        }, $CollisionDetection_render_bounding_box$7.$$arity = -5);
      })($nesting[0], $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["author_engine/game/common/parts/colors"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module, $hash = Opal.hash, $truthy = Opal.truthy;

  Opal.add_stubs(['$new', '$rgb', '$dig', '$==', '$red', '$green', '$blue', '$to_s', '$<']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'AuthorEngine');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Part');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'Colors');

        var $nesting = [self].concat($parent_nesting), $Colors_black$1, $Colors_dark_blue$2, $Colors_dark_purple$3, $Colors_dark_green$4, $Colors_brown$5, $Colors_dark_gray$6, $Colors_light_gray$7, $Colors_white$8, $Colors_red$9, $Colors_orange$10, $Colors_yellow$11, $Colors_green$12, $Colors_blue$13, $Colors_indigo$14, $Colors_pink$15, $Colors_peach$16, $Colors_rgb$17, $Colors_xml_color$18;

        
        Opal.const_set($nesting[0], 'Color', $$($nesting, 'Struct').$new("red", "green", "blue"));
        Opal.const_set($nesting[0], 'COLORS', $hash(0, $$($nesting, 'Color').$new(0, 0, 0), 1, $$($nesting, 'Color').$new(29, 43, 83), 2, $$($nesting, 'Color').$new(126, 37, 83), 3, $$($nesting, 'Color').$new(0, 135, 81), 4, $$($nesting, 'Color').$new(171, 82, 54), 5, $$($nesting, 'Color').$new(95, 87, 79), 6, $$($nesting, 'Color').$new(194, 195, 199), 7, $$($nesting, 'Color').$new(255, 241, 232), 8, $$($nesting, 'Color').$new(255, 0, 77), 9, $$($nesting, 'Color').$new(255, 163, 0), 10, $$($nesting, 'Color').$new(225, 236, 39), 11, $$($nesting, 'Color').$new(0, 228, 54), 12, $$($nesting, 'Color').$new(41, 173, 255), 13, $$($nesting, 'Color').$new(131, 118, 156), 14, $$($nesting, 'Color').$new(225, 119, 168), 15, $$($nesting, 'Color').$new(255, 204, 170)));
        
        Opal.def(self, '$black', $Colors_black$1 = function $$black() {
          var self = this;

          return self.$rgb($$($nesting, 'COLORS').$dig(0))
        }, $Colors_black$1.$$arity = 0);
        
        Opal.def(self, '$dark_blue', $Colors_dark_blue$2 = function $$dark_blue() {
          var self = this;

          return self.$rgb($$($nesting, 'COLORS').$dig(1))
        }, $Colors_dark_blue$2.$$arity = 0);
        
        Opal.def(self, '$dark_purple', $Colors_dark_purple$3 = function $$dark_purple() {
          var self = this;

          return self.$rgb($$($nesting, 'COLORS').$dig(2))
        }, $Colors_dark_purple$3.$$arity = 0);
        
        Opal.def(self, '$dark_green', $Colors_dark_green$4 = function $$dark_green() {
          var self = this;

          return self.$rgb($$($nesting, 'COLORS').$dig(3))
        }, $Colors_dark_green$4.$$arity = 0);
        
        Opal.def(self, '$brown', $Colors_brown$5 = function $$brown() {
          var self = this;

          return self.$rgb($$($nesting, 'COLORS').$dig(4))
        }, $Colors_brown$5.$$arity = 0);
        
        Opal.def(self, '$dark_gray', $Colors_dark_gray$6 = function $$dark_gray() {
          var self = this;

          return self.$rgb($$($nesting, 'COLORS').$dig(5))
        }, $Colors_dark_gray$6.$$arity = 0);
        
        Opal.def(self, '$light_gray', $Colors_light_gray$7 = function $$light_gray() {
          var self = this;

          return self.$rgb($$($nesting, 'COLORS').$dig(6))
        }, $Colors_light_gray$7.$$arity = 0);
        
        Opal.def(self, '$white', $Colors_white$8 = function $$white() {
          var self = this;

          return self.$rgb($$($nesting, 'COLORS').$dig(7))
        }, $Colors_white$8.$$arity = 0);
        
        Opal.def(self, '$red', $Colors_red$9 = function $$red() {
          var self = this;

          return self.$rgb($$($nesting, 'COLORS').$dig(8))
        }, $Colors_red$9.$$arity = 0);
        
        Opal.def(self, '$orange', $Colors_orange$10 = function $$orange() {
          var self = this;

          return self.$rgb($$($nesting, 'COLORS').$dig(9))
        }, $Colors_orange$10.$$arity = 0);
        
        Opal.def(self, '$yellow', $Colors_yellow$11 = function $$yellow() {
          var self = this;

          return self.$rgb($$($nesting, 'COLORS').$dig(10))
        }, $Colors_yellow$11.$$arity = 0);
        
        Opal.def(self, '$green', $Colors_green$12 = function $$green() {
          var self = this;

          return self.$rgb($$($nesting, 'COLORS').$dig(11))
        }, $Colors_green$12.$$arity = 0);
        
        Opal.def(self, '$blue', $Colors_blue$13 = function $$blue() {
          var self = this;

          return self.$rgb($$($nesting, 'COLORS').$dig(12))
        }, $Colors_blue$13.$$arity = 0);
        
        Opal.def(self, '$indigo', $Colors_indigo$14 = function $$indigo() {
          var self = this;

          return self.$rgb($$($nesting, 'COLORS').$dig(13))
        }, $Colors_indigo$14.$$arity = 0);
        
        Opal.def(self, '$pink', $Colors_pink$15 = function $$pink() {
          var self = this;

          return self.$rgb($$($nesting, 'COLORS').$dig(14))
        }, $Colors_pink$15.$$arity = 0);
        
        Opal.def(self, '$peach', $Colors_peach$16 = function $$peach() {
          var self = this;

          return self.$rgb($$($nesting, 'COLORS').$dig(15))
        }, $Colors_peach$16.$$arity = 0);
        
        Opal.def(self, '$rgb', $Colors_rgb$17 = function $$rgb(color) {
          var self = this;

          if ($$($nesting, 'RUBY_ENGINE')['$==']("opal")) {
            return "" + "rgb(" + (color.$red()) + ", " + (color.$green()) + ", " + (color.$blue()) + ")"
          } else {
            return nil
          }
        }, $Colors_rgb$17.$$arity = 1);
        
        Opal.def(self, '$xml_color', $Colors_xml_color$18 = function $$xml_color(color) {
          var self = this, red = nil, green = nil, blue = nil;

          
          red = color.$red().$to_s(16);
          green = color.$green().$to_s(16);
          blue = color.$blue().$to_s(16);
          if ($truthy($rb_lt(color.$red(), 10))) {
            red = "" + "0" + (red)};
          if ($truthy($rb_lt(color.$green(), 10))) {
            green = "" + "0" + (green)};
          if ($truthy($rb_lt(color.$blue(), 10))) {
            blue = "" + "0" + (blue)};
          return "" + (red) + (green) + (blue);
        }, $Colors_xml_color$18.$$arity = 1);
      })($nesting[0], $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["author_engine/game/opal/parts/graphics"] = function(Opal) {
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$sprites', '$instance', '$<=', '$/', '$[]', '$levels', '$raise', '$each', '$sprite', '$x', '$y', '$index', '$==', '$sprite=', '$-', '$call']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'AuthorEngine');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Part');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'OpalGraphics');

        var $nesting = [self].concat($parent_nesting), $OpalGraphics_rect$1, $OpalGraphics_sprite$2, $OpalGraphics_text$3, $OpalGraphics_level$4, $OpalGraphics_swap$6, $OpalGraphics_translate$8, $OpalGraphics_rotate$9;

        
        
        Opal.def(self, '$rect', $OpalGraphics_rect$1 = function $$rect(x, y, width, height, color, z) {
          var self = this;
          if (self.authorengine_canvas_context == null) self.authorengine_canvas_context = nil;

          
          
          if (x == null) {
            x = 0;
          };
          
          if (y == null) {
            y = 0;
          };
          
          if (width == null) {
            width = 1;
          };
          
          if (height == null) {
            height = 1;
          };
          
          if (color == null) {
            color = "white";
          };
          
          if (z == null) {
            z = 0;
          };
          self.authorengine_canvas_context.fillStyle = color;
          self.authorengine_canvas_context.fillRect(x, y, width, height);
          return nil;
        }, $OpalGraphics_rect$1.$$arity = -1);
        
        Opal.def(self, '$sprite', $OpalGraphics_sprite$2 = function $$sprite(sprite_sheet_index, x, y, z, alpha) {
          var self = this, size = nil, sprites = nil;
          if (self.authorengine_canvas_context == null) self.authorengine_canvas_context = nil;

          
          
          if (x == null) {
            x = 0;
          };
          
          if (y == null) {
            y = 0;
          };
          
          if (z == null) {
            z = 0;
          };
          
          if (alpha == null) {
            alpha = 255;
          };
          size = 16;
          sprites = $$$($$($nesting, 'AuthorEngine'), 'GameRunner').$instance().$sprites();
          self.authorengine_canvas_context.save();
          if ($truthy($rb_le(alpha, 0))) {
            alpha = 0
          } else {
            alpha = $rb_divide(alpha, 255.0)
          };
          self.authorengine_canvas_context.globalAlpha = alpha;
          self.authorengine_canvas_context.drawImage(sprites['$[]'](sprite_sheet_index), x, y);
          return self.authorengine_canvas_context.restore();
        }, $OpalGraphics_sprite$2.$$arity = -2);
        
        Opal.def(self, '$text', $OpalGraphics_text$3 = function $$text(string, x, y, size, z, color) {
          var self = this, font = nil;
          if (self.authorengine_canvas_context == null) self.authorengine_canvas_context = nil;

          
          
          if (x == null) {
            x = 0;
          };
          
          if (y == null) {
            y = 0;
          };
          
          if (size == null) {
            size = 4;
          };
          
          if (z == null) {
            z = 0;
          };
          
          if (color == null) {
            color = "white";
          };
          font = "" + (size) + "px Connection, Consolas";
          self.authorengine_canvas_context.font = font;
          self.authorengine_canvas_context.fillStyle = color;
          self.authorengine_canvas_context.textBaseline = "top";
          return self.authorengine_canvas_context.fillText(string, x, y);
        }, $OpalGraphics_text$3.$$arity = -2);
        
        Opal.def(self, '$level', $OpalGraphics_level$4 = function $$level(index, z) {
          var $$5, self = this, _level = nil;

          
          
          if (z == null) {
            z = 0;
          };
          _level = $$$($$($nesting, 'AuthorEngine'), 'GameRunner').$instance().$levels()['$[]'](index);
          if ($truthy(_level)) {
          } else {
            self.$raise("" + "No level at '" + (index) + "'!")
          };
          return $send(_level, 'each', [], ($$5 = function(sprite){var self = $$5.$$s || this;

          
            
            if (sprite == null) {
              sprite = nil;
            };
            return self.$sprite(sprite.$sprite(), sprite.$x(), sprite.$y(), z);}, $$5.$$s = self, $$5.$$arity = 1, $$5));
        }, $OpalGraphics_level$4.$$arity = -2);
        
        Opal.def(self, '$swap', $OpalGraphics_swap$6 = function $$swap(level, current_sprite, replacement_sprite) {
          var $$7, self = this, _level = nil;

          
          _level = $$$($$($nesting, 'AuthorEngine'), 'GameRunner').$instance().$levels()['$[]'](level);
          if ($truthy(_level)) {
          } else {
            self.$raise("" + "No level at '" + (self.$index()) + "'!")
          };
          if ($truthy($$$($$($nesting, 'AuthorEngine'), 'GameRunner').$instance().$sprites()['$[]'](current_sprite))) {
          } else {
            self.$raise("" + "No sprite at '" + (current_sprite) + "'!")
          };
          if ($truthy($$$($$($nesting, 'AuthorEngine'), 'GameRunner').$instance().$sprites()['$[]'](replacement_sprite))) {
          } else {
            self.$raise("" + "No sprite at '" + (replacement_sprite) + "'!")
          };
          return $send(_level, 'each', [], ($$7 = function(sprite){var self = $$7.$$s || this, $writer = nil;

          
            
            if (sprite == null) {
              sprite = nil;
            };
            if (sprite.$sprite()['$=='](current_sprite)) {
              
              $writer = [replacement_sprite];
              $send(sprite, 'sprite=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];
            } else {
              return nil
            };}, $$7.$$s = self, $$7.$$arity = 1, $$7));
        }, $OpalGraphics_swap$6.$$arity = 3);
        
        Opal.def(self, '$translate', $OpalGraphics_translate$8 = function $$translate(x, y) {
          var $iter = $OpalGraphics_translate$8.$$p, block = $iter || nil, self = this;
          if (self.authorengine_canvas_context == null) self.authorengine_canvas_context = nil;

          if ($iter) $OpalGraphics_translate$8.$$p = null;
          
          
          if ($iter) $OpalGraphics_translate$8.$$p = null;;
          self.authorengine_canvas_context.save();
          self.authorengine_canvas_context.translate(x, y);
          if ($truthy(block)) {
            block.$call()};
          return self.authorengine_canvas_context.restore();
        }, $OpalGraphics_translate$8.$$arity = 2);
        
        Opal.def(self, '$rotate', $OpalGraphics_rotate$9 = function $$rotate(angle, x, y) {
          var $iter = $OpalGraphics_rotate$9.$$p, block = $iter || nil, self = this;
          if (self.authorengine_canvas_context == null) self.authorengine_canvas_context = nil;

          if ($iter) $OpalGraphics_rotate$9.$$p = null;
          
          
          if ($iter) $OpalGraphics_rotate$9.$$p = null;;
          
          if (x == null) {
            x = 0;
          };
          
          if (y == null) {
            y = 0;
          };
          self.authorengine_canvas_context.save();
          self.authorengine_canvas_context.translate(x, y);
          self.authorengine_canvas_context.rotate(angle);
          if ($truthy(block)) {
            block.$call()};
          return self.authorengine_canvas_context.restore();
        }, $OpalGraphics_rotate$9.$$arity = -2);
      })($nesting[0], $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["author_engine/game/opal/parts/input"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$dig', '$raise']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'AuthorEngine');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Part');

      var $nesting = [self].concat($parent_nesting);

      return (function($base, $parent_nesting) {
        var self = $module($base, 'OpalInput');

        var $nesting = [self].concat($parent_nesting), $OpalInput_button$ques$1;

        
        Opal.const_set($nesting[0], 'BUTTONS', $hash2(["left", "right", "up", "down", "x", "y"], {"left": "ArrowLeft", "right": "ArrowRight", "up": "ArrowUp", "down": "ArrowDown", "x": "x", "y": "c"}));
        Opal.const_set($nesting[0], 'KEY_STATES', $hash2([], {}));
        
        Opal.def(self, '$button?', $OpalInput_button$ques$1 = function(name) {
          var self = this, down = nil;

          
          down = false;
          if ($truthy($$($nesting, 'BUTTONS').$dig(name))) {
            down = $$($nesting, 'KEY_STATES').$dig($$($nesting, 'BUTTONS').$dig(name))
          } else {
            self.$raise("" + "Button '" + (name) + "' not found!")
          };
          return down;
        }, $OpalInput_button$ques$1.$$arity = 1);
      })($nesting[0], $nesting)
    })($nesting[0], null, $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["author_engine/collision_detection/collision_detection"] = function(Opal) {
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$new', '$==', '$to_a', '$each_slice', '$to_blob', '$times', '$/', '$rows', '$columns', '$<<', '$[]', '$+', '$*', '$add_sprite', '$flatten!', '$each', '$add_level', '$clear', '$bounding_box', '$bounding_boxes_intersect?', '$box', '$sprite', '$x', '$y', '$width', '$-', '$height', '$>', '$-@', '$[]=', '$render_bounding_box', '$draw_line', '$private', '$<=', '$>=', '$authorengine_canvas_context', '$game', '$instance', '$ord', '$solid_at?', '$<', '$x=', '$y=', '$width=', '$height=']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'AuthorEngine');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'CollisionDetection');

      var $nesting = [self].concat($parent_nesting), $CollisionDetection_initialize$1, $CollisionDetection_clear$7, $CollisionDetection_add_sprite$8, $CollisionDetection_add_level$9, $CollisionDetection_box$10, $CollisionDetection_sprite_vs_sprite$11, $CollisionDetection_sprite_vs_level$12, $CollisionDetection_colliding_edge$14, $CollisionDetection_debug_draw_sprite$15, $CollisionDetection_debug_draw_level$16, $CollisionDetection_render_bounding_box$18, $CollisionDetection_bounding_boxes_intersect$ques$19, $CollisionDetection_draw_line$20, $CollisionDetection_solid_at$ques$21, $CollisionDetection_bounding_box$22;

      self.$$prototype.game_levels = self.$$prototype.known_collisions = self.$$prototype.sprites = self.$$prototype.levels = nil;
      
      Opal.const_set($nesting[0], 'Color', $$($nesting, 'Struct').$new("red", "green", "blue", "alpha"));
      Opal.const_set($nesting[0], 'BoundingBox', $$($nesting, 'Struct').$new("x", "y", "width", "height"));
      
      Opal.def(self, '$initialize', $CollisionDetection_initialize$1 = function $$initialize(game_sprites, game_levels, spritesheet) {
        var $$2, $$6, self = this, spritesheet_blob = nil;

        
        self.game_sprites = game_sprites;
        self.game_levels = game_levels;
        self.sprites = [];
        self.levels = [];
        self.known_collisions = [];
        spritesheet_blob = (function() {if ($$($nesting, 'RUBY_ENGINE')['$==']("opal")) {
          return spritesheet.$to_blob().$each_slice(4).$to_a()
        } else {
          return nil
        }; return nil; })();
        $send($rb_divide(spritesheet.$rows(), 16), 'times', [], ($$2 = function(y){var self = $$2.$$s || this, $$3;

        
          
          if (y == null) {
            y = nil;
          };
          return $send($rb_divide(spritesheet.$columns(), 16), 'times', [], ($$3 = function(x){var self = $$3.$$s || this, $$4, blob = nil;

          
            
            if (x == null) {
              x = nil;
            };
            blob = [];
            $send((16), 'times', [], ($$4 = function(sy){var self = $$4.$$s || this, $$5;

            
              
              if (sy == null) {
                sy = nil;
              };
              return $send((16), 'times', [], ($$5 = function(sx){var self = $$5.$$s || this;

              
                
                if (sx == null) {
                  sx = nil;
                };
                return blob['$<<'](spritesheet_blob['$[]']($rb_plus($rb_times($rb_plus($rb_times(y, 16), sy), spritesheet.$columns()), $rb_plus($rb_times(x, 16), sx))));}, $$5.$$s = self, $$5.$$arity = 1, $$5));}, $$4.$$s = self, $$4.$$arity = 1, $$4));
            return self.$add_sprite(blob['$flatten!']());}, $$3.$$s = self, $$3.$$arity = 1, $$3));}, $$2.$$s = self, $$2.$$arity = 1, $$2));
        return $send(self.game_levels, 'each', [], ($$6 = function(level){var self = $$6.$$s || this;

        
          
          if (level == null) {
            level = nil;
          };
          return self.$add_level(level);}, $$6.$$s = self, $$6.$$arity = 1, $$6));
      }, $CollisionDetection_initialize$1.$$arity = 3);
      
      Opal.def(self, '$clear', $CollisionDetection_clear$7 = function $$clear() {
        var self = this;

        return self.known_collisions.$clear()
      }, $CollisionDetection_clear$7.$$arity = 0);
      
      Opal.def(self, '$add_sprite', $CollisionDetection_add_sprite$8 = function $$add_sprite(blob) {
        var self = this;

        return self.sprites['$<<']($hash2(["blob", "box"], {"blob": blob, "box": self.$bounding_box(blob)}))
      }, $CollisionDetection_add_sprite$8.$$arity = 1);
      
      Opal.def(self, '$add_level', $CollisionDetection_add_level$9 = function $$add_level(level_array) {
        var self = this;

        return self.levels['$<<'](level_array)
      }, $CollisionDetection_add_level$9.$$arity = 1);
      
      Opal.def(self, '$box', $CollisionDetection_box$10 = function $$box(sprite_index) {
        var self = this;

        return self.sprites['$[]'](sprite_index)['$[]']("box")
      }, $CollisionDetection_box$10.$$arity = 1);
      
      Opal.def(self, '$sprite_vs_sprite', $CollisionDetection_sprite_vs_sprite$11 = function $$sprite_vs_sprite(sprite_index, sprite_x, sprite_y, target_sprite_index, target_x, target_y) {
        var self = this;

        return self['$bounding_boxes_intersect?'](self.$box(sprite_index), sprite_x, sprite_y, self.$box(target_sprite_index), target_x, target_y)
      }, $CollisionDetection_sprite_vs_sprite$11.$$arity = 6);
      
      Opal.def(self, '$sprite_vs_level', $CollisionDetection_sprite_vs_level$12 = function $$sprite_vs_level(sprite_index, sprite_x, sprite_y, level) {
        var $$13, self = this, detected = nil, collider = nil;

        
        detected = [];
        collider = self.$box(sprite_index);
        $send(self.levels['$[]'](level), 'each', [], ($$13 = function(sprite){var self = $$13.$$s || this;

        
          
          if (sprite == null) {
            sprite = nil;
          };
          if ($truthy(self['$bounding_boxes_intersect?'](collider, sprite_x, sprite_y, self.$box(sprite.$sprite()), sprite.$x(), sprite.$y()))) {
            return detected['$<<'](sprite)
          } else {
            return nil
          };}, $$13.$$s = self, $$13.$$arity = 1, $$13));
        return detected;
      }, $CollisionDetection_sprite_vs_level$12.$$arity = 4);
      
      Opal.def(self, '$colliding_edge', $CollisionDetection_colliding_edge$14 = function $$colliding_edge(sprite_index, sprite_x, sprite_y, target_sprite_index, target_x, target_y) {
        var self = this, sprite_box = nil, target_box = nil, edges = nil, wy = nil, hx = nil, $writer = nil;

        
        sprite_box = self.$box(sprite_index);
        target_box = self.$box(target_sprite_index);
        edges = $hash2(["top", "left", "right", "bottom"], {"top": false, "left": false, "right": false, "bottom": false});
        wy = $rb_times($rb_plus(sprite_box.$width(), target_box.$width()), $rb_minus($rb_minus(sprite_y, sprite_box.$height()), $rb_minus(target_y, $rb_divide(target_box.$height(), 2))));
        hx = $rb_times($rb_plus(sprite_box.$height(), target_box.$height()), $rb_minus($rb_minus(sprite_x, sprite_box.$width()), $rb_minus(target_x, $rb_divide(target_box.$height(), 2))));
        if ($truthy($rb_gt(wy, hx))) {
          if ($truthy($rb_gt(wy, hx['$-@']()))) {
            
            $writer = ["bottom", true];
            $send(edges, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
          } else {
            
            $writer = ["left", true];
            $send(edges, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];
          }
        } else if ($truthy($rb_gt(wy, hx['$-@']()))) {
          
          $writer = ["right", true];
          $send(edges, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
        } else {
          
          $writer = ["top", true];
          $send(edges, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
        };
        return edges;
      }, $CollisionDetection_colliding_edge$14.$$arity = 6);
      
      Opal.def(self, '$debug_draw_sprite', $CollisionDetection_debug_draw_sprite$15 = function $$debug_draw_sprite(sprite_index, sprite_x, sprite_y) {
        var self = this;

        return self.$render_bounding_box(sprite_index, self.$box(sprite_index), sprite_x, sprite_y)
      }, $CollisionDetection_debug_draw_sprite$15.$$arity = 3);
      
      Opal.def(self, '$debug_draw_level', $CollisionDetection_debug_draw_level$16 = function $$debug_draw_level(level_index) {
        var $$17, self = this;

        return $send(self.levels['$[]'](level_index), 'each', [], ($$17 = function(sprite){var self = $$17.$$s || this;

        
          
          if (sprite == null) {
            sprite = nil;
          };
          return self.$render_bounding_box(sprite.$sprite(), self.$box(sprite.$sprite()), sprite.$x(), sprite.$y());}, $$17.$$s = self, $$17.$$arity = 1, $$17))
      }, $CollisionDetection_debug_draw_level$16.$$arity = 1);
      
      Opal.def(self, '$render_bounding_box', $CollisionDetection_render_bounding_box$18 = function $$render_bounding_box(sprite_index, box, sprite_x, sprite_y, edges, z, color, collision_color) {
        var self = this, paint_color = nil;

        
        
        if (edges == null) {
          edges = $hash2([], {});
        };
        
        if (z == null) {
          z = $$$($$($nesting, 'Float'), 'INFINITY');
        };
        
        if (color == null) {
          color = 3355508480;
        };
        
        if (collision_color == null) {
          collision_color = 3372155135;
        };
        if ($$($nesting, 'RUBY_ENGINE')['$==']("opal")) {
          
          color = "green";
          collision_color = "purple";
        } else {
          nil
        };
        paint_color = color;
        if ($truthy(edges['$[]']("top"))) {
          paint_color = collision_color
        } else {
          paint_color = color
        };
        self.$draw_line($rb_plus(box.$x(), sprite_x), $rb_plus(box.$y(), sprite_y), $rb_plus($rb_plus(box.$x(), sprite_x), box.$width()), $rb_plus(box.$y(), sprite_y), paint_color, z);
        if ($truthy(edges['$[]']("right"))) {
          paint_color = collision_color
        } else {
          paint_color = color
        };
        self.$draw_line($rb_plus($rb_plus(box.$x(), sprite_x), box.$width()), $rb_plus(box.$y(), sprite_y), $rb_plus($rb_plus(box.$x(), sprite_x), box.$width()), $rb_plus($rb_plus(box.$y(), sprite_y), box.$height()), paint_color, z);
        if ($truthy(edges['$[]']("bottom"))) {
          paint_color = collision_color
        } else {
          paint_color = color
        };
        self.$draw_line($rb_plus($rb_plus(box.$x(), sprite_x), box.$width()), $rb_plus($rb_plus(box.$y(), sprite_y), box.$height()), $rb_plus(box.$x(), sprite_x), $rb_plus($rb_plus(box.$y(), sprite_y), box.$height()), paint_color, z);
        if ($truthy(edges['$[]']("left"))) {
          paint_color = collision_color
        } else {
          paint_color = color
        };
        return self.$draw_line($rb_plus(box.$x(), sprite_x), $rb_plus($rb_plus(box.$y(), sprite_y), box.$height()), $rb_plus(box.$x(), sprite_x), $rb_plus(box.$y(), sprite_y), paint_color, z);
      }, $CollisionDetection_render_bounding_box$18.$$arity = -5);
      self.$private();
      
      Opal.def(self, '$bounding_boxes_intersect?', $CollisionDetection_bounding_boxes_intersect$ques$19 = function(a, a_x, a_y, b, b_x, b_y) {
        var $a, $b, $c, self = this;

        return ($truthy($a = ($truthy($b = ($truthy($c = $rb_le($rb_plus(a.$x(), a_x), $rb_plus($rb_plus(b.$x(), b_x), b.$width()))) ? $rb_ge($rb_plus($rb_plus(a.$x(), a_x), a.$width()), $rb_plus(b.$x(), b_x)) : $c)) ? $rb_le($rb_plus(a.$y(), a_y), $rb_plus($rb_plus(b.$y(), b_y), b.$height())) : $b)) ? $rb_ge($rb_plus($rb_plus(a.$y(), a_y), a.$height()), $rb_plus(b.$y(), b_y)) : $a)
      }, $CollisionDetection_bounding_boxes_intersect$ques$19.$$arity = 6);
      
      Opal.def(self, '$draw_line', $CollisionDetection_draw_line$20 = function $$draw_line(x, y, x2, y2, color, z) {
        var self = this;

        
        
        if (z == null) {
          z = 0;
        };
        if ($$($nesting, 'RUBY_ENGINE')['$==']("opal")) {
          
          $$$($$($nesting, 'AuthorEngine'), 'GameRunner').$instance().$game().$authorengine_canvas_context().strokeStyle = color;
          $$$($$($nesting, 'AuthorEngine'), 'GameRunner').$instance().$game().$authorengine_canvas_context().lineWidth = 1;
          $$$($$($nesting, 'AuthorEngine'), 'GameRunner').$instance().$game().$authorengine_canvas_context().beginPath();
          $$$($$($nesting, 'AuthorEngine'), 'GameRunner').$instance().$game().$authorengine_canvas_context().moveTo(x, y);
          $$$($$($nesting, 'AuthorEngine'), 'GameRunner').$instance().$game().$authorengine_canvas_context().lineTo(x2, y2);
          return $$$($$($nesting, 'AuthorEngine'), 'GameRunner').$instance().$game().$authorengine_canvas_context().stroke();
        } else {
          return nil
        };
      }, $CollisionDetection_draw_line$20.$$arity = -6);
      
      Opal.def(self, '$solid_at?', $CollisionDetection_solid_at$ques$21 = function(blob, x, y) {
        var self = this, width = nil;

        
        width = 16;
        return $rb_gt(blob['$[]']($rb_plus($rb_times($rb_plus($rb_times(y, width), x), 4), 3)).$ord(), 0);
      }, $CollisionDetection_solid_at$ques$21.$$arity = 3);
      return (Opal.def(self, '$bounding_box', $CollisionDetection_bounding_box$22 = function $$bounding_box(blob, size) {
        var $$23, self = this, box = nil, $writer = nil;

        
        
        if (size == null) {
          size = 16;
        };
        box = $$($nesting, 'BoundingBox').$new(size, size, 0, 0);
        $send(size, 'times', [], ($$23 = function(y){var self = $$23.$$s || this, $$24;

        
          
          if (y == null) {
            y = nil;
          };
          return $send(size, 'times', [], ($$24 = function(x){var self = $$24.$$s || this, $writer = nil;

          
            
            if (x == null) {
              x = nil;
            };
            if ($truthy(self['$solid_at?'](blob, x, y))) {
              
              if ($truthy($rb_lt(x, box.$x()))) {
                
                $writer = [x];
                $send(box, 'x=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];};
              if ($truthy($rb_lt(y, box.$y()))) {
                
                $writer = [y];
                $send(box, 'y=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];};
              if ($truthy($rb_gt(x, box.$width()))) {
                
                $writer = [x];
                $send(box, 'width=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];};
              if ($truthy($rb_gt(y, box.$height()))) {
                
                $writer = [y];
                $send(box, 'height=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];
              } else {
                return nil
              };
            } else {
              return nil
            };}, $$24.$$s = self, $$24.$$arity = 1, $$24));}, $$23.$$s = self, $$23.$$arity = 1, $$23));
        
        $writer = [$rb_minus(box.$width(), box.$x())];
        $send(box, 'width=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [$rb_minus(box.$height(), box.$y())];
        $send(box, 'height=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [$rb_plus(box.$width(), 1)];
        $send(box, 'width=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [$rb_plus(box.$height(), 1)];
        $send(box, 'height=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return box;
      }, $CollisionDetection_bounding_box$22.$$arity = -2), nil) && 'bounding_box';
    })($nesting[0], null, $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["author_engine/sprite"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$new']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'AuthorEngine');

    var $nesting = [self].concat($parent_nesting);

    return Opal.const_set($nesting[0], 'Sprite', $$($nesting, 'Struct').$new("sprite", "x", "y", "z"))
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["author_engine/game/game"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$include', '$==', '$attr_accessor', '$!=', '$black', '$instance_eval', '$rect', '$width', '$height']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'AuthorEngine');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'Game');

      var $nesting = [self].concat($parent_nesting), $Game_initialize$1, $Game_draw_background$2, $Game_init$3, $Game_draw$4, $Game_update$5;

      self.$$prototype.authorengine_canvas = self.$$prototype.background_color = nil;
      
      self.$include($$$($$$($$($nesting, 'AuthorEngine'), 'Part'), 'Common'));
      self.$include($$$($$$($$($nesting, 'AuthorEngine'), 'Part'), 'CollisionDetection'));
      self.$include($$$($$$($$($nesting, 'AuthorEngine'), 'Part'), 'Colors'));
      if ($$($nesting, 'RUBY_ENGINE')['$==']("opal")) {
        
        self.$include($$$($$$($$($nesting, 'AuthorEngine'), 'Part'), 'OpalGraphics'));
        self.$include($$$($$$($$($nesting, 'AuthorEngine'), 'Part'), 'OpalInput'));
      } else {
        nil
      };
      self.$attr_accessor("authorengine_scale", "authorengine_canvas", "authorengine_canvas_context");
      self.$attr_accessor("authorengine_collision_detection");
      
      Opal.def(self, '$initialize', $Game_initialize$1 = function $$initialize($kwargs) {
        var code, self = this;

        
        
        if ($kwargs == null) {
          $kwargs = $hash2([], {});
        } else if (!$kwargs.$$is_hash) {
          throw Opal.ArgumentError.$new('expected kwargs');
        };
        
        if (!Opal.hasOwnProperty.call($kwargs.$$smap, 'code')) {
          throw Opal.ArgumentError.$new('missing keyword: code');
        }
        code = $kwargs.$$smap["code"];;
        if ($$($nesting, 'RUBY_ENGINE')['$==']("opal")) {
          
          self.authorengine_scale = 1.0;
          self.authorengine_canvas = document.getElementById('canvas');
          self.authorengine_canvas_context = self.authorengine_canvas.getContext('2d');
        } else {
          nil
        };
        if ($truthy($$($nesting, 'RUBY_ENGINE')['$!=']("opal"))) {
          nil};
        self.background_color = self.$black();
        return self.$instance_eval(code);
      }, $Game_initialize$1.$$arity = 1);
      
      Opal.def(self, '$draw_background', $Game_draw_background$2 = function $$draw_background() {
        var self = this;

        return self.$rect(0, 0, self.$width(), self.$height(), self.background_color)
      }, $Game_draw_background$2.$$arity = 0);
      
      Opal.def(self, '$init', $Game_init$3 = function $$init() {
        var self = this;

        return nil
      }, $Game_init$3.$$arity = 0);
      
      Opal.def(self, '$draw', $Game_draw$4 = function $$draw() {
        var self = this;

        return nil
      }, $Game_draw$4.$$arity = 0);
      return (Opal.def(self, '$update', $Game_update$5 = function $$update() {
        var self = this;

        return nil
      }, $Game_update$5.$$arity = 0), nil) && 'update';
    })($nesting[0], null, $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["author_engine/save_file"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send, $hash2 = Opal.hash2;

  Opal.add_stubs(['$new', '$exists?', '$open', '$write', '$attr_reader', '$==', '$inflated?', '$save_code', '$save_spritesheet', '$save_levels', '$puts', '$file', '$load', '$read', '$include?', '$first', '$lines', '$basename', '$sub', '$expand_path', '$code', '$instance', '$+', '$project_path', '$project_name', '$spritesheet', '$save', '$width', '$height', '$unpack', '$to_blob', '$each_slice', '$chars', '$join', '$each', '$levels', '$map', '$sprite', '$x', '$y', '$z', '$strip', '$identify_mode', '$load_code', '$load_spritesheet', '$load_levels', '$!=', '$>', '$size', '$each_line', '$start_with?', '$last', '$split', '$to_i', '$scan', '$Integer', '$hex', '$<<', '$[]']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'AuthorEngine');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'SaveFile');

      var $nesting = [self].concat($parent_nesting), $SaveFile_create$1, $SaveFile_initialize$3, $SaveFile_save$4, $SaveFile_inflate$excl$6, $SaveFile_inflated$ques$8, $SaveFile_project_name$9, $SaveFile_project_path$10, $SaveFile_save_code$11, $SaveFile_save_spritesheet$12, $SaveFile_save_levels$14, $SaveFile_load$17, $SaveFile_identify_mode$19, $SaveFile_load_code$20, $SaveFile_load_spritesheet$22, $SaveFile_load_levels$25;

      self.$$prototype.file = self.$$prototype.code = self.$$prototype.sprites = self.$$prototype.mode = self.$$prototype.buffer = nil;
      
      Opal.const_set($nesting[0], 'SpriteSheetData', $$($nesting, 'Struct').$new("columns", "rows", "to_blob"));
      Opal.defs(self, '$create', $SaveFile_create$1 = function $$create(file) {
        var $$2, self = this;

        if ($truthy($$($nesting, 'File')['$exists?'](file))) {
          return false
        } else {
          
          $send($$($nesting, 'File'), 'open', [file, "w"], ($$2 = function(f){var self = $$2.$$s || this;

          
            
            if (f == null) {
              f = nil;
            };
            return f.$write("");}, $$2.$$s = self, $$2.$$arity = 1, $$2));
          if ($truthy($$($nesting, 'File')['$exists?'](file))) {
            return true
          } else {
            return false
          };
        }
      }, $SaveFile_create$1.$$arity = 1);
      self.$attr_reader("file", "mode");
      self.$attr_reader("code", "sprites", "levels");
      
      Opal.def(self, '$initialize', $SaveFile_initialize$3 = function $$initialize(file) {
        var $a, self = this;

        
        self.file = file;
        self.buffer = "";
        self.mode = "compact";
        $a = [nil, nil, nil], (self.code = $a[0]), (self.sprites = $a[1]), (self.levels = $a[2]), $a;
        if ($$($nesting, 'RUBY_ENGINE')['$==']("opal")) {
          return nil
        } else {
          return nil
        };
      }, $SaveFile_initialize$3.$$arity = 1);
      
      Opal.def(self, '$save', $SaveFile_save$4 = function $$save() {
        var $$5, self = this;

        
        if ($truthy(self['$inflated?']())) {
          self.buffer = "# inflated\n"};
        self.$save_code();
        self.$save_spritesheet();
        self.$save_levels();
        $send($$($nesting, 'File'), 'open', [self.file, "w"], ($$5 = function(f){var self = $$5.$$s || this;
          if (self.buffer == null) self.buffer = nil;

        
          
          if (f == null) {
            f = nil;
          };
          return f.$write(self.buffer);}, $$5.$$s = self, $$5.$$arity = 1, $$5));
        self.buffer = "";
        return self.$puts("" + "Saved " + (self.$file()));
      }, $SaveFile_save$4.$$arity = 0);
      
      Opal.def(self, '$inflate!', $SaveFile_inflate$excl$6 = function() {
        var $$7, self = this, file = nil;

        
        self.$load();
        self.mode = "inflated";
        self.$save_code(self.code);
        self.$save_spritesheet($$$($$($nesting, 'Gosu'), 'Image').$new(self.sprites, $hash2(["retro"], {"retro": true})));
        file = $$($nesting, 'File').$read(self.file);
        if ($truthy(file.$lines().$first()['$include?']("# inflated"))) {
          return nil
        } else {
          return $send($$($nesting, 'File'), 'open', [self.file, "w"], ($$7 = function(f){var self = $$7.$$s || this;

          
            
            if (f == null) {
              f = nil;
            };
            f.$write("# inflated\n");
            return f.$write(file);}, $$7.$$s = self, $$7.$$arity = 1, $$7))
        };
      }, $SaveFile_inflate$excl$6.$$arity = 0);
      
      Opal.def(self, '$inflated?', $SaveFile_inflated$ques$8 = function() {
        var self = this;

        return self.mode['$==']("inflated")
      }, $SaveFile_inflated$ques$8.$$arity = 0);
      
      Opal.def(self, '$project_name', $SaveFile_project_name$9 = function $$project_name() {
        var self = this;

        return $$($nesting, 'File').$basename(self.file, ".authorengine")
      }, $SaveFile_project_name$9.$$arity = 0);
      
      Opal.def(self, '$project_path', $SaveFile_project_path$10 = function $$project_path() {
        var self = this;

        return $$($nesting, 'File').$expand_path(self.file).$sub($$($nesting, 'File').$basename(self.file), "")
      }, $SaveFile_project_path$10.$$arity = 0);
      
      Opal.def(self, '$save_code', $SaveFile_save_code$11 = function $$save_code(code) {
        var self = this;

        
        
        if (code == null) {
          code = $$($nesting, 'CodeEditor').$instance().$code();
        };
        if ($truthy(self['$inflated?']())) {
          
          self.buffer = $rb_plus(self.buffer, "" + "___CODE___?" + (self.$project_path()) + (self.$project_name()) + ".rb\n");
          $$($nesting, 'File').$write("" + (self.$project_path()) + (self.$project_name()) + ".rb", code);
          self.$puts("" + "Saved code to " + (self.$project_path()) + (self.$project_name()) + ".rb");
        } else {
          self.buffer = $rb_plus(self.buffer, "___CODE___\n")
        };
        return (self.buffer = $rb_plus(self.buffer, code));
      }, $SaveFile_save_code$11.$$arity = -1);
      
      Opal.def(self, '$save_spritesheet', $SaveFile_save_spritesheet$12 = function $$save_spritesheet(sheet) {
        var $$13, self = this, pack = nil;

        
        
        if (sheet == null) {
          sheet = $$($nesting, 'SpriteEditor').$instance().$spritesheet();
        };
        if ($truthy(self['$inflated?']())) {
          
          self.buffer = $rb_plus(self.buffer, "" + "___SPRITES___?" + (self.$project_path()) + (self.$project_name()) + ".png\n");
          sheet.$save("" + (self.$project_path()) + (self.$project_name()) + ".png");
          self.$puts("" + "Saved spritesheet to " + (self.$project_path()) + (self.$project_name()) + ".png");
        } else {
          self.buffer = $rb_plus(self.buffer, "___SPRITES___\n")
        };
        self.buffer = $rb_plus(self.buffer, "" + (sheet.$width()) + "x" + (sheet.$height()));
        self.buffer = $rb_plus(self.buffer, "\n");
        pack = sheet.$to_blob().$unpack("H*").$first();
        $send(pack.$chars(), 'each_slice', [1024], ($$13 = function(slice){var self = $$13.$$s || this;
          if (self.buffer == null) self.buffer = nil;

        
          
          if (slice == null) {
            slice = nil;
          };
          self.buffer = $rb_plus(self.buffer, slice.$join());
          return (self.buffer = $rb_plus(self.buffer, "\n"));}, $$13.$$s = self, $$13.$$arity = 1, $$13));
        return (self.buffer = $rb_plus(self.buffer, "\n"));
      }, $SaveFile_save_spritesheet$12.$$arity = -1);
      
      Opal.def(self, '$save_levels', $SaveFile_save_levels$14 = function $$save_levels() {
        var $$15, self = this;

        
        self.buffer = $rb_plus(self.buffer, "___LEVELS___\n");
        $send($$($nesting, 'LevelEditor').$instance().$levels(), 'each', [], ($$15 = function(level){var self = $$15.$$s || this, $$16;
          if (self.buffer == null) self.buffer = nil;

        
          
          if (level == null) {
            level = nil;
          };
          return (self.buffer = $rb_plus(self.buffer, "" + ($send(level, 'map', [], ($$16 = function(s){var self = $$16.$$s || this;

          
            
            if (s == null) {
              s = nil;
            };
            return "" + (s.$sprite()) + "," + (s.$x()) + "," + (s.$y()) + "," + (s.$z());}, $$16.$$s = self, $$16.$$arity = 1, $$16)).$join(",")) + "\n"));}, $$15.$$s = self, $$15.$$arity = 1, $$15));
        return self.buffer.$strip();
      }, $SaveFile_save_levels$14.$$arity = 0);
      
      Opal.def(self, '$load', $SaveFile_load$17 = function $$load(from_file, data) {
        var $$18, self = this, string = nil;

        
        
        if (from_file == null) {
          from_file = true;
        };
        
        if (data == null) {
          data = nil;
        };
        string = "";
        if ($truthy(from_file)) {
          $send($$($nesting, 'File'), 'open', [self.file, "r"], ($$18 = function(f){var self = $$18.$$s || this;

          
            
            if (f == null) {
              f = nil;
            };
            return (string = f.$read());}, $$18.$$s = self, $$18.$$arity = 1, $$18))
        } else {
          string = data
        };
        self.$identify_mode(string);
        self.$load_code(string);
        self.$load_spritesheet(string);
        return self.$load_levels(string);
      }, $SaveFile_load$17.$$arity = -1);
      
      Opal.def(self, '$identify_mode', $SaveFile_identify_mode$19 = function $$identify_mode(string) {
        var $a, $b, self = this;

        if ($truthy(($truthy($a = ($truthy($b = $$($nesting, 'RUBY_ENGINE')['$!=']("opal")) ? $rb_gt(string.$lines().$size(), 0) : $b)) ? string.$lines().$first()['$include?']("# inflated") : $a))) {
          return (self.mode = "inflated")
        } else {
          return (self.mode = "compact")
        }
      }, $SaveFile_identify_mode$19.$$arity = 1);
      
      Opal.def(self, '$load_code', $SaveFile_load_code$20 = function $$load_code(string) {
        var $$21, self = this, buffer = nil, in_code = nil;

        
        buffer = "";
        in_code = false;
        (function(){var $brk = Opal.new_brk(); try {return $send(string, 'each_line', [], ($$21 = function(line){var self = $$21.$$s || this, $a;

        
          
          if (line == null) {
            line = nil;
          };
          if ($truthy(line['$start_with?']("___CODE___"))) {
            
            if ($truthy(($truthy($a = line.$strip()['$include?']("?")) ? self['$inflated?']() : $a))) {
              
              self.$puts("" + "Loading code from: " + (line.$strip().$split("?").$last()));
              buffer = $$($nesting, 'File').$read(line.$strip().$split("?").$last());
              
              Opal.brk(nil, $brk);};
            in_code = true;
            return nil;;};
          if ($truthy(($truthy($a = line['$start_with?']("___")) ? in_code : $a))) {
            
            Opal.brk(nil, $brk)};
          if ($truthy(in_code)) {
            return (buffer = $rb_plus(buffer, "" + (line)))
          } else {
            return nil
          };}, $$21.$$s = self, $$21.$$brk = $brk, $$21.$$arity = 1, $$21))
        } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
        return (self.code = buffer);
      }, $SaveFile_load_code$20.$$arity = 1);
      
      Opal.def(self, '$load_spritesheet', $SaveFile_load_spritesheet$22 = function $$load_spritesheet(string) {
        var $$23, $$24, self = this, buffer = nil, width = nil, height = nil, in_sprites = nil, stream = nil;

        
        buffer = "";
        width = 0;
        height = 0;
        in_sprites = false;
        (function(){var $brk = Opal.new_brk(); try {return $send(string, 'each_line', [], ($$23 = function(line){var self = $$23.$$s || this, $a, image = nil, a = nil;

        
          
          if (line == null) {
            line = nil;
          };
          if ($truthy(line.$strip()['$start_with?']("___SPRITES___"))) {
            
            if ($truthy(($truthy($a = line.$strip()['$include?']("?")) ? self['$inflated?']() : $a))) {
              
              self.$puts("" + "Loading spritesheet from: " + (line.$strip().$split("?").$last()));
              image = $$$($$($nesting, 'Gosu'), 'Image').$new(line.$strip().$split("?").$last(), $hash2(["retro"], {"retro": true}));
              buffer = image.$to_blob();
              $a = [image.$width(), image.$height()], (width = $a[0]), (height = $a[1]), $a;
              
              Opal.brk(nil, $brk);};
            in_sprites = true;
            return nil;;};
          if ($truthy(($truthy($a = line['$start_with?']("___")) ? in_sprites : $a))) {
            
            Opal.brk(nil, $brk)};
          if ($truthy(in_sprites)) {
          } else {
            return nil;
          };
          if ($truthy(line['$include?']("x"))) {
            
            a = line.$strip().$split("x");
            width = a.$first().$to_i();
            height = a.$last().$to_i();
            return nil;;};
          return (buffer = $rb_plus(buffer, line.$strip()));}, $$23.$$s = self, $$23.$$brk = $brk, $$23.$$arity = 1, $$23))
        } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
        stream = nil;
        if ($truthy($$($nesting, 'RUBY_ENGINE')['$!=']("opal"))) {
          nil
        } else {
          stream = $send(buffer.$scan(/../), 'map', [], ($$24 = function(x){var self = $$24.$$s || this;

          
            
            if (x == null) {
              x = nil;
            };
            return self.$Integer(x.$hex());}, $$24.$$s = self, $$24.$$arity = 1, $$24))
        };
        return (self.sprites = $$($nesting, 'SpriteSheetData').$new(width, height, stream));
      }, $SaveFile_load_spritesheet$22.$$arity = 1);
      return (Opal.def(self, '$load_levels', $SaveFile_load_levels$25 = function $$load_levels(string) {
        var $$26, self = this, levels = nil, in_level = nil;

        
        levels = [];
        in_level = false;
        (function(){var $brk = Opal.new_brk(); try {return $send(string, 'each_line', [], ($$26 = function(line){var self = $$26.$$s || this, $a, $$27, level = nil;

        
          
          if (line == null) {
            line = nil;
          };
          if ($truthy(line['$start_with?']("___LEVELS___"))) {
            
            in_level = true;
            return nil;;};
          if ($truthy(($truthy($a = line['$start_with?']("___")) ? in_level : $a))) {
            
            Opal.brk(nil, $brk)};
          if ($truthy(in_level)) {
            
            level = [];
            $send(line.$strip().$split(","), 'each_slice', [4], ($$27 = function(sprite){var self = $$27.$$s || this;

            
              
              if (sprite == null) {
                sprite = nil;
              };
              return level['$<<']($$($nesting, 'Sprite').$new(self.$Integer(sprite['$[]'](0)), self.$Integer(sprite['$[]'](1)), self.$Integer(sprite['$[]'](2)), self.$Integer(sprite['$[]'](3))));}, $$27.$$s = self, $$27.$$arity = 1, $$27));
            return levels['$<<'](level);
          } else {
            return nil
          };}, $$26.$$s = self, $$26.$$brk = $brk, $$26.$$arity = 1, $$26))
        } catch (err) { if (err === $brk) { return err.$v } else { throw err } }})();
        return (self.levels = levels);
      }, $SaveFile_load_levels$25.$$arity = 1), nil) && 'load_levels';
    })($nesting[0], null, $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["author_engine/game/opal/touch_handler"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module, $hash2 = Opal.hash2, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$new', '$[]', '$x=', '$-', '$y=', '$copy_touch', '$[]=', '$trigger?', '$authorengine_canvas', '$game', '$set_touch', '$handle_touch_end', '$delete']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'AuthorEngine');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $parent_nesting) {
      var self = $module($base, 'TouchHandler');

      var $nesting = [self].concat($parent_nesting), $TouchHandler_touch_handler_setup$1, $TouchHandler_copy_touch$2, $TouchHandler_set_touch$3, $TouchHandler_handle_touch_start$4, $TouchHandler_handle_touch_move$5, $TouchHandler_handle_touch_cancel$6, $TouchHandler_handle_touch_end$7;

      
      Opal.const_set($nesting[0], 'Touch', $$($nesting, 'Struct').$new("origin_x", "origin_y", "x", "y"));
      
      Opal.def(self, '$touch_handler_setup', $TouchHandler_touch_handler_setup$1 = function $$touch_handler_setup() {
        var self = this;

        return (self.current_touches = $hash2([], {}))
      }, $TouchHandler_touch_handler_setup$1.$$arity = 0);
      
      Opal.def(self, '$copy_touch', $TouchHandler_copy_touch$2 = function $$copy_touch(touch) {
        var self = this;

        return $$($nesting, 'Touch').$new(touch.pageX, touch.pageY, touch.pageX, touch.pageY)
      }, $TouchHandler_copy_touch$2.$$arity = 1);
      
      Opal.def(self, '$set_touch', $TouchHandler_set_touch$3 = function $$set_touch(touch) {
        var self = this, struct = nil, $writer = nil;
        if (self.current_touches == null) self.current_touches = nil;

        
        struct = self.current_touches['$[]'](touch.identifier);
        
        $writer = [touch.pageX];
        $send(struct, 'x=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [touch.pageY];
        $send(struct, 'y=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return nil;
      }, $TouchHandler_set_touch$3.$$arity = 1);
      
      Opal.def(self, '$handle_touch_start', $TouchHandler_handle_touch_start$4 = function $$handle_touch_start(event) {
        var $a, self = this, touches = nil, $writer = nil;
        if (self.current_touches == null) self.current_touches = nil;
        if (self.fullscreen_button == null) self.fullscreen_button = nil;
        if (self.game == null) self.game = nil;

        
        event.preventDefault();
        touches = event.changedTouches;
        for (var i = 0; i < touches.length; i++) {
        (($writer = [touches[i].identifier, self.$copy_touch(touches[i])]), $send(self.current_touches, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)])
      };
        if ($truthy(($truthy($a = self.fullscreen_button) ? self.fullscreen_button['$trigger?'](self.current_touches) : $a))) {
          if (document.fullscreenElement == null && self.game.$authorengine_canvas().requestFullscreen) {
          self.$game().$authorengine_canvas().requestFullscreen()
        } else if(document.fullscreenElement != null && document.exitFullscreen) {
          document.exitFullscreen()
        } };
        return nil;
      }, $TouchHandler_handle_touch_start$4.$$arity = 1);
      
      Opal.def(self, '$handle_touch_move', $TouchHandler_handle_touch_move$5 = function $$handle_touch_move(event) {
        var self = this, touches = nil;

        
        event.preventDefault();
        touches = event.changedTouches;
        for (var i = 0; i < touches.length; i++) {
        self.$set_touch(touches[i])
      };
        return nil;
      }, $TouchHandler_handle_touch_move$5.$$arity = 1);
      
      Opal.def(self, '$handle_touch_cancel', $TouchHandler_handle_touch_cancel$6 = function $$handle_touch_cancel(event) {
        var self = this;

        return self.$handle_touch_end(event)
      }, $TouchHandler_handle_touch_cancel$6.$$arity = 1);
      
      Opal.def(self, '$handle_touch_end', $TouchHandler_handle_touch_end$7 = function $$handle_touch_end(event) {
        var self = this, touches = nil;
        if (self.current_touches == null) self.current_touches = nil;

        
        event.preventDefault();
        touches = event.changedTouches;
        for (var i = 0; i < touches.length; i++) {
        self.current_touches.$delete(touches[i].identifier)
      };
        return nil;
      }, $TouchHandler_handle_touch_end$7.$$arity = 1);
    })($nesting[0], $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["author_engine/game/opal/touch_button"] = function(Opal) {
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$attr_accessor', '$attr_reader', '$game', '$instance', '$*', '$authorengine_scale', '$/', '$authorengine_canvas_context', '$detect', '$between?', '$x', '$+', '$y', '$active', '$inactive', '$call', '$[]', '$[]=', '$-']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'AuthorEngine');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'TouchButton');

      var $nesting = [self].concat($parent_nesting), $TouchButton_initialize$1, $TouchButton_draw$2, $TouchButton_trigger$ques$3, $TouchButton_active$5, $TouchButton_inactive$6;

      self.$$prototype.game = self.$$prototype.game_width = self.$$prototype.color = self.$$prototype.x = self.$$prototype.y = self.$$prototype.width = self.$$prototype.height = self.$$prototype.label = self.$$prototype.for_key = self.$$prototype.block = self.$$prototype.buttons = self.$$prototype.key_states = nil;
      
      self.$attr_accessor("x", "y");
      self.$attr_reader("width", "height");
      
      Opal.def(self, '$initialize', $TouchButton_initialize$1 = function $$initialize($kwargs) {
        var $iter = $TouchButton_initialize$1.$$p, block = $iter || nil, label, color, width, height, x, y, for_key, $a, self = this;

        if ($iter) $TouchButton_initialize$1.$$p = null;
        
        
        if ($iter) $TouchButton_initialize$1.$$p = null;;
        
        if ($kwargs == null) {
          $kwargs = $hash2([], {});
        } else if (!$kwargs.$$is_hash) {
          throw Opal.ArgumentError.$new('expected kwargs');
        };
        
        if (!Opal.hasOwnProperty.call($kwargs.$$smap, 'label')) {
          throw Opal.ArgumentError.$new('missing keyword: label');
        }
        label = $kwargs.$$smap["label"];;
        
        if (!Opal.hasOwnProperty.call($kwargs.$$smap, 'color')) {
          throw Opal.ArgumentError.$new('missing keyword: color');
        }
        color = $kwargs.$$smap["color"];;
        
        if (!Opal.hasOwnProperty.call($kwargs.$$smap, 'width')) {
          throw Opal.ArgumentError.$new('missing keyword: width');
        }
        width = $kwargs.$$smap["width"];;
        
        if (!Opal.hasOwnProperty.call($kwargs.$$smap, 'height')) {
          throw Opal.ArgumentError.$new('missing keyword: height');
        }
        height = $kwargs.$$smap["height"];;
        
        x = $kwargs.$$smap["x"];
        if (x == null) {
          x = 0
        };
        
        y = $kwargs.$$smap["y"];
        if (y == null) {
          y = 0
        };
        
        for_key = $kwargs.$$smap["for_key"];
        if (for_key == null) {
          for_key = nil
        };
        $a = [label, color, x, y, width, height], (self.label = $a[0]), (self.color = $a[1]), (self.x = $a[2]), (self.y = $a[3]), (self.width = $a[4]), (self.height = $a[5]), $a;
        self.for_key = for_key;
        self.block = block;
        self.buttons = $$$($$$($$$($$($nesting, 'AuthorEngine'), 'Part'), 'OpalInput'), 'BUTTONS');
        self.key_states = $$$($$$($$$($$($nesting, 'AuthorEngine'), 'Part'), 'OpalInput'), 'KEY_STATES');
        self.game = $$$($$($nesting, 'AuthorEngine'), 'GameRunner').$instance().$game();
        self.game_width = $rb_times(128, self.game.$authorengine_scale());
        return (self.game_x = window.innerWidth/2 - $rb_divide(self.game_width, 2));
      }, $TouchButton_initialize$1.$$arity = 1);
      
      Opal.def(self, '$draw', $TouchButton_draw$2 = function $$draw() {
        var self = this, font = nil;

        
        self.game.$authorengine_canvas_context().fillStyle = self.color;
        self.game.$authorengine_canvas_context().fillRect(self.x, self.y, self.width, self.height);
        font = "" + (self.height) + "px Connection, Consolas";
        self.game.$authorengine_canvas_context().font = font;
        self.game.$authorengine_canvas_context().fillStyle = "white";
        self.game.$authorengine_canvas_context().textBaseline = "top";
        return self.game.$authorengine_canvas_context().fillText(self.label, self.x, self.y, self.width);
      }, $TouchButton_draw$2.$$arity = 0);
      
      Opal.def(self, '$trigger?', $TouchButton_trigger$ques$3 = function(touches) {
        var $$4, $a, self = this, triggered = nil;

        
        triggered = false;
        $send(touches, 'detect', [], ($$4 = function(id, touch){var self = $$4.$$s || this, $a;
          if (self.x == null) self.x = nil;
          if (self.width == null) self.width = nil;
          if (self.y == null) self.y = nil;
          if (self.height == null) self.height = nil;

        
          
          if (id == null) {
            id = nil;
          };
          
          if (touch == null) {
            touch = nil;
          };
          if ($truthy(($truthy($a = touch.$x()['$between?'](self.x, $rb_plus(self.x, self.width))) ? touch.$y()['$between?'](self.y, $rb_plus(self.y, self.height)) : $a))) {
            return (triggered = true)
          } else {
            return nil
          };}, $$4.$$s = self, $$4.$$arity = 2, $$4));
        if ($truthy(self.for_key)) {
          
          if ($truthy(triggered)) {
            self.$active()};
          if ($truthy(triggered)) {
          } else {
            self.$inactive()
          };
        } else if ($truthy(($truthy($a = self.block) ? triggered : $a))) {
          self.block.$call()};
        return triggered;
      }, $TouchButton_trigger$ques$3.$$arity = 1);
      
      Opal.def(self, '$active', $TouchButton_active$5 = function $$active() {
        var self = this, $writer = nil;

        
        $writer = [self.buttons['$[]'](self.for_key), true];
        $send(self.key_states, '[]=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];
      }, $TouchButton_active$5.$$arity = 0);
      return (Opal.def(self, '$inactive', $TouchButton_inactive$6 = function $$inactive() {
        var self = this, $writer = nil;

        
        $writer = [self.buttons['$[]'](self.for_key), false];
        $send(self.key_states, '[]=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];
      }, $TouchButton_inactive$6.$$arity = 0), nil) && 'inactive';
    })($nesting[0], null, $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["author_engine/game/opal/touch_joystick"] = function(Opal) {
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$attr_accessor', '$game', '$instance', '$*', '$authorengine_scale', '$/', '$dark_gray', '$light_gray', '$+', '$authorengine_canvas_context', '$-', '$<', '$distance', '$detect', '$circles_collide?', '$origin_x', '$origin_y', '$clamp', '$x', '$y', '$atan2', '$cos', '$sin', '$trigger_input', '$!=', '$-@', '$set', '$>', '$[]', '$[]=']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'AuthorEngine');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'TouchJoystick');

      var $nesting = [self].concat($parent_nesting), $TouchJoystick_initialize$1, $TouchJoystick_draw$2, $TouchJoystick_circles_collide$ques$3, $TouchJoystick_update$4, $TouchJoystick_trigger_input$6, $TouchJoystick_set$7;

      self.$$prototype.game = self.$$prototype.game_width = self.$$prototype.color = self.$$prototype.background = self.$$prototype.x = self.$$prototype.y = self.$$prototype.radius = self.$$prototype.joystick_radius = self.$$prototype.joystick_x = self.$$prototype.joystick_y = self.$$prototype.buttons = self.$$prototype.key_states = nil;
      
      self.$attr_accessor("x", "y", "radius");
      
      Opal.def(self, '$initialize', $TouchJoystick_initialize$1 = function $$initialize($kwargs) {
        var radius, x, y, background, color, $a, self = this;

        
        
        if ($kwargs == null) {
          $kwargs = $hash2([], {});
        } else if (!$kwargs.$$is_hash) {
          throw Opal.ArgumentError.$new('expected kwargs');
        };
        
        if (!Opal.hasOwnProperty.call($kwargs.$$smap, 'radius')) {
          throw Opal.ArgumentError.$new('missing keyword: radius');
        }
        radius = $kwargs.$$smap["radius"];;
        
        x = $kwargs.$$smap["x"];
        if (x == null) {
          x = 0
        };
        
        y = $kwargs.$$smap["y"];
        if (y == null) {
          y = 0
        };
        
        background = $kwargs.$$smap["background"];
        if (background == null) {
          background = nil
        };
        
        color = $kwargs.$$smap["color"];
        if (color == null) {
          color = nil
        };
        $a = [x, y, radius, background, color], (self.x = $a[0]), (self.y = $a[1]), (self.radius = $a[2]), (self.background = $a[3]), (self.color = $a[4]), $a;
        self.buttons = $$$($$$($$$($$($nesting, 'AuthorEngine'), 'Part'), 'OpalInput'), 'BUTTONS');
        self.key_states = $$$($$$($$$($$($nesting, 'AuthorEngine'), 'Part'), 'OpalInput'), 'KEY_STATES');
        self.game = $$$($$($nesting, 'AuthorEngine'), 'GameRunner').$instance().$game();
        self.game_width = $rb_times(128, self.game.$authorengine_scale());
        self.game_x = window.innerWidth/2 - $rb_divide(self.game_width, 2);
        if ($truthy(self.color)) {
        } else {
          self.color = self.game.$dark_gray()
        };
        if ($truthy(self.background)) {
        } else {
          self.background = self.game.$light_gray()
        };
        return $a = [self.x, self.y, $rb_divide(self.radius, 2)], (self.joystick_x = $a[0]), (self.joystick_y = $a[1]), (self.joystick_radius = $a[2]), $a;
      }, $TouchJoystick_initialize$1.$$arity = 1);
      
      Opal.def(self, '$draw', $TouchJoystick_draw$2 = function $$draw() {
        var self = this, combo = nil;

        
        combo = $rb_plus(self.radius, self.joystick_radius);
        self.game.$authorengine_canvas_context().clearRect($rb_minus(self.x, combo), $rb_minus(self.y, combo), $rb_plus(combo, combo), $rb_plus(combo, combo));
        self.game.$authorengine_canvas_context().fillStyle = self.background;
        self.game.$authorengine_canvas_context().beginPath();
        self.game.$authorengine_canvas_context().arc(self.x, self.y, self.radius, 0, 2 * Math.PI);
        self.game.$authorengine_canvas_context().fill();
        self.game.$authorengine_canvas_context().beginPath();
        self.game.$authorengine_canvas_context().fillStyle = self.color;
        self.game.$authorengine_canvas_context().arc(self.joystick_x, self.joystick_y, self.joystick_radius, 0, 2 * Math.PI);
        self.game.$authorengine_canvas_context().fill();
        return nil;
      }, $TouchJoystick_draw$2.$$arity = 0);
      
      Opal.def(self, '$circles_collide?', $TouchJoystick_circles_collide$ques$3 = function(x, y, radius, x2, y2, radius2) {
        var self = this, radii = nil;

        
        radii = $rb_plus(radius, radius2);
        if ($truthy($rb_lt(self.game.$distance(x, y, x2, y2), radii))) {
          return true
        } else {
          return false
        };
      }, $TouchJoystick_circles_collide$ques$3.$$arity = 6);
      
      Opal.def(self, '$update', $TouchJoystick_update$4 = function $$update(touches) {try {

        var $$5, self = this, touch_detected = nil;

        
        touch_detected = false;
        $send(touches, 'detect', [], ($$5 = function(id, touch){var self = $$5.$$s || this, _distance = nil, _direction = nil;
          if (self.x == null) self.x = nil;
          if (self.y == null) self.y = nil;
          if (self.radius == null) self.radius = nil;
          if (self.game == null) self.game = nil;

        
          
          if (id == null) {
            id = nil;
          };
          
          if (touch == null) {
            touch = nil;
          };
          if ($truthy(self['$circles_collide?'](self.x, self.y, self.radius, touch.$origin_x(), touch.$origin_y(), 1))) {
            
            touch_detected = true;
            _distance = self.game.$distance(self.x, self.y, touch.$x(), touch.$y()).$clamp(0, self.radius);
            _direction = $$($nesting, 'Math').$atan2($rb_minus(touch.$y(), self.y), $rb_minus(touch.$x(), self.x));
            self.joystick_x = $rb_plus(self.x, $rb_times(_distance, $$($nesting, 'Math').$cos(_direction)));
            self.joystick_y = $rb_plus(self.y, $rb_times(_distance, $$($nesting, 'Math').$sin(_direction)));
            Opal.ret(true);
          } else {
            return nil
          };}, $$5.$$s = self, $$5.$$arity = 2, $$5));
        if ($truthy(touch_detected)) {
        } else {
          
          self.joystick_x = self.x;
          self.joystick_y = self.y;
        };
        self.$trigger_input();
        return nil;
        } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
      }, $TouchJoystick_update$4.$$arity = 1);
      
      Opal.def(self, '$trigger_input', $TouchJoystick_trigger_input$6 = function $$trigger_input(threshold) {
        var $a, self = this;

        
        
        if (threshold == null) {
          threshold = 0.35;
        };
        threshold = $rb_times(self.radius, threshold);
        if ($truthy(($truthy($a = self.joystick_x['$!='](self.x)) ? $a : self.joystick_y['$!='](self.y)))) {
          
          if ($truthy($rb_lt($rb_minus(self.x, self.joystick_x), threshold['$-@']()))) {
            self.$set("right", true)
          } else {
            self.$set("right", false)
          };
          if ($truthy($rb_gt($rb_minus(self.x, self.joystick_x), threshold))) {
            self.$set("left", true)
          } else {
            self.$set("left", false)
          };
          if ($truthy($rb_lt($rb_minus(self.y, self.joystick_y), threshold['$-@']()))) {
            self.$set("down", true)
          } else {
            self.$set("down", false)
          };
          if ($truthy($rb_gt($rb_minus(self.y, self.joystick_y), threshold))) {
            return self.$set("up", true)
          } else {
            return self.$set("up", false)
          };
        } else {
          
          self.$set("up", false);
          self.$set("down", false);
          self.$set("left", false);
          return self.$set("right", false);
        };
      }, $TouchJoystick_trigger_input$6.$$arity = -1);
      return (Opal.def(self, '$set', $TouchJoystick_set$7 = function $$set(key, boolean$) {
        var self = this, $writer = nil;

        
        $writer = [self.buttons['$[]'](key), boolean$];
        $send(self.key_states, '[]=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];
      }, $TouchJoystick_set$7.$$arity = 2), nil) && 'set';
    })($nesting[0], null, $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["author_engine/game/opal/game_runner"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $hash2 = Opal.hash2, $truthy = Opal.truthy;

  Opal.add_stubs(['$include', '$attr_reader', '$instance=', '$-', '$new', '$load', '$levels', '$each', '$*', '$x', '$x=', '$y', '$y=', '$columns', '$sprites', '$rows', '$code', '$build_spritesheet_and_sprites_list', '$authorengine_collision_detection=', '$init', '$push', '$red', '$yellow', '$black', '$touch_handler_setup', '$resize_canvas', '$draw_background', '$draw', '$update', '$run_game', '$authorengine_scale', '$/', '$authorengine_canvas_context', '$+', '$>=', '$milliseconds', '$==', '$size', '$draw_touch_controls', '$update_touch_controls', '$text', '$height', '$to_proc', '$trigger?', '$<', '$puts', '$radius', '$reverse', '$width', '$authorengine_scale=', '$authorengine_canvas', '$reposition_touch_controls', '$to_blob', '$load_sprites', '$times', '$[]=', '$handle_touch_start', '$handle_touch_move', '$handle_touch_cancel', '$handle_touch_end', '$fullscreen_changed']);
  return (function($base, $super, $parent_nesting) {
    var self = $klass($base, $super, 'AuthorEngine');

    var $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      var self = $klass($base, $super, 'GameRunner');

      var $nesting = [self].concat($parent_nesting), $GameRunner_instance$1, $GameRunner_instance$eq$2, $GameRunner_initialize$3, $GameRunner_draw$6, $GameRunner_update$7, $GameRunner_run_game$8, $GameRunner_draw_touch_controls$9, $GameRunner_update_touch_controls$10, $GameRunner_reposition_touch_controls$12, $GameRunner_resize_canvas$15, $GameRunner_build_spritesheet_and_sprites_list$16, $GameRunner_load_sprites$17, $GameRunner_fullscreen_changed$20, $GameRunner_show$21;

      self.$$prototype.save_file = self.$$prototype.levels = self.$$prototype.sprites = self.$$prototype.collision_detection = self.$$prototype.game = self.$$prototype.touch_buttons = self.$$prototype.counted_frames = self.$$prototype.frame_count_stated_at = self.$$prototype.spritesheet_width = self.$$prototype.sprite_size = self.$$prototype.spritesheet_height = self.$$prototype.show_touch_controls = self.$$prototype.fullscreen_button = self.$$prototype.touch_joystick = self.$$prototype.current_touches = self.$$prototype.spritesheet = nil;
      
      Opal.defs(self, '$instance', $GameRunner_instance$1 = function $$instance() {
        var self = this;
        if (self.instance == null) self.instance = nil;

        return self.instance
      }, $GameRunner_instance$1.$$arity = 0);
      Opal.defs(self, '$instance=', $GameRunner_instance$eq$2 = function(klass) {
        var self = this;

        return (self.instance = klass)
      }, $GameRunner_instance$eq$2.$$arity = 1);
      self.$include($$($nesting, 'TouchHandler'));
      self.$attr_reader("save_file", "spritesheet", "sprites", "levels", "fps");
      self.$attr_reader("game");
      
      Opal.def(self, '$initialize', $GameRunner_initialize$3 = function $$initialize(project_string) {
        var $$4, self = this, $writer = nil, size = nil;

        
        
        $writer = [self];
        $send($$$($$($nesting, 'AuthorEngine'), 'GameRunner'), 'instance=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        self.save_file = $$$($$($nesting, 'AuthorEngine'), 'SaveFile').$new(nil);
        self.save_file.$load(false, project_string);
        size = 16;
        self.levels = self.save_file.$levels();
        $send(self.levels, 'each', [], ($$4 = function(level){var self = $$4.$$s || this, $$5;

        
          
          if (level == null) {
            level = nil;
          };
          return $send(level, 'each', [], ($$5 = function(sprite){var self = $$5.$$s || this;

          
            
            if (sprite == null) {
              sprite = nil;
            };
            
            $writer = [$rb_times(sprite.$x(), size)];
            $send(sprite, 'x=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [$rb_times(sprite.$y(), size)];
            $send(sprite, 'y=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];;}, $$5.$$s = self, $$5.$$arity = 1, $$5));}, $$4.$$s = self, $$4.$$arity = 1, $$4));
        self.sprites = [];
        self.spritesheet = nil;
        self.spritesheet_width = self.save_file.$sprites().$columns();
        self.spritesheet_height = self.save_file.$sprites().$rows();
        self.sprite_size = 16;
        self.fps = 0;
        self.counted_frames = 0;
        self.frame_count_stated_at = 0;
        self.game = $$($nesting, 'Game').$new($hash2(["code"], {"code": self.save_file.$code()}));
        self.$build_spritesheet_and_sprites_list();
        self.collision_detection = $$$($$($nesting, 'AuthorEngine'), 'CollisionDetection').$new(self.sprites, self.levels, self.save_file.$sprites());
        
        $writer = [self.collision_detection];
        $send(self.game, 'authorengine_collision_detection=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        self.game.$init();
        self.show_touch_controls = false;
        self.touch_joystick = $$($nesting, 'TouchJoystick').$new($hash2(["radius"], {"radius": 50}));
        self.touch_buttons = [];
        self.touch_buttons.$push($$($nesting, 'TouchButton').$new($hash2(["label", "color", "width", "height", "for_key"], {"label": "X", "color": self.game.$red(), "width": 50, "height": 50, "for_key": "x"})), $$($nesting, 'TouchButton').$new($hash2(["label", "color", "width", "height", "for_key"], {"label": "Y", "color": self.game.$yellow(), "width": 50, "height": 50, "for_key": "y"})));
        self.fullscreen_button = $$($nesting, 'TouchButton').$new($hash2(["label", "color", "width", "height"], {"label": "Fullscreen", "color": self.game.$black(), "width": 100, "height": 50}));
        self.$touch_handler_setup();
        self.$resize_canvas();
        return self;
      }, $GameRunner_initialize$3.$$arity = 1);
      
      Opal.def(self, '$draw', $GameRunner_draw$6 = function $$draw() {
        var self = this;

        
        self.game.$draw_background();
        self.game.$draw();
        return nil;
      }, $GameRunner_draw$6.$$arity = 0);
      
      Opal.def(self, '$update', $GameRunner_update$7 = function $$update() {
        var self = this;

        
        self.game.$update();
        return nil;
      }, $GameRunner_update$7.$$arity = 0);
      
      Opal.def(self, '$run_game', $GameRunner_run_game$8 = function $$run_game() {
        var self = this, width = nil, height = nil, game_width = nil, game_height = nil, area_width = nil, region = nil;

        
        window.requestAnimationFrame(function() {self.$run_game()});
        width = window.innerWidth;
        height = window.innerHeight;
        game_width = $rb_times(128, self.game.$authorengine_scale());
        game_height = $rb_times(128, self.game.$authorengine_scale());
        area_width = $rb_divide($rb_minus(window.innerWidth, game_width), 2);
        self.game.$authorengine_canvas_context().clearRect(area_width,0, game_width, game_height);
        self.counted_frames = $rb_plus(self.counted_frames, 1);
        if ($truthy($rb_ge($rb_minus(self.game.$milliseconds(), self.frame_count_stated_at), 1000.0))) {
          
          self.fps = self.counted_frames;
          self.frame_count_stated_at = self.game.$milliseconds();
          self.counted_frames = 0;};
        if (self.sprites.$size()['$==']($rb_times($rb_divide(self.spritesheet_width, self.sprite_size), $rb_divide(self.spritesheet_height, self.sprite_size)))) {
          
          self.game.$authorengine_canvas_context().save();
          self.game.$authorengine_canvas_context().translate(window.innerWidth/2 - $rb_divide(game_height, 2), 0);
          self.game.$authorengine_canvas_context().scale(self.game.$authorengine_scale(), self.game.$authorengine_scale());
          self.game.$authorengine_canvas_context().save();
          region = new Path2D();
          region.rect(0, 0, 128, 128);
          self.game.$authorengine_canvas_context().clip(region);
          self.game.$authorengine_canvas_context().save();
          self.$draw();
          self.game.$authorengine_canvas_context().restore();
          self.game.$authorengine_canvas_context().restore();
          self.game.$authorengine_canvas_context().restore();
          self.$update();
          if ($truthy(self.show_touch_controls)) {
            
            self.$draw_touch_controls();
            self.$update_touch_controls();};
        } else {
          
          self.game.$draw_background();
          self.game.$text("" + "Loading sprite " + (self.sprites.$size()) + "/" + ($rb_times($rb_divide(self.spritesheet_width, self.sprite_size), $rb_divide(self.spritesheet_height, self.sprite_size))) + "...", 0, $rb_divide(self.game.$height(), 2), 8);
        };
        return nil;
      }, $GameRunner_run_game$8.$$arity = 0);
      
      Opal.def(self, '$draw_touch_controls', $GameRunner_draw_touch_controls$9 = function $$draw_touch_controls() {
        var self = this;

        
        self.fullscreen_button.$draw();
        $send(self.touch_buttons, 'each', [], "draw".$to_proc());
        return self.touch_joystick.$draw();
      }, $GameRunner_draw_touch_controls$9.$$arity = 0);
      
      Opal.def(self, '$update_touch_controls', $GameRunner_update_touch_controls$10 = function $$update_touch_controls() {
        var $$11, self = this;

        
        $send(self.touch_buttons, 'each', [], ($$11 = function(button){var self = $$11.$$s || this;
          if (self.current_touches == null) self.current_touches = nil;

        
          
          if (button == null) {
            button = nil;
          };
          return button['$trigger?'](self.current_touches);}, $$11.$$s = self, $$11.$$arity = 1, $$11));
        return self.touch_joystick.$update(self.current_touches);
      }, $GameRunner_update_touch_controls$10.$$arity = 0);
      
      Opal.def(self, '$reposition_touch_controls', $GameRunner_reposition_touch_controls$12 = function $$reposition_touch_controls() {
        var $$13, $$14, self = this, width = nil, height = nil, game_width = nil, game_height = nil, area_width = nil, area_height = nil, $writer = nil, padding = nil, last_x = nil;

        
        if ($truthy(self.touch_joystick)) {
        } else {
          return nil
        };
        width = window.innerWidth;
        height = window.innerHeight;
        game_width = $rb_times(128, self.game.$authorengine_scale());
        game_height = $rb_times(128, self.game.$authorengine_scale());
        if ($truthy($rb_lt(width, height))) {
          
          area_width = width;
          area_height = $rb_minus(height, game_height);
          self.$puts("" + "space: width " + (area_width) + " x height " + (area_height));
          
          $writer = [$rb_plus(self.touch_joystick.$radius(), self.touch_joystick.$radius())];
          $send(self.touch_joystick, 'x=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = [$rb_plus(game_height, $rb_divide(area_height, 2))];
          $send(self.touch_joystick, 'y=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          padding = 10;
          last_x = 20;
          $send(self.touch_buttons.$reverse(), 'each', [], ($$13 = function(button){var self = $$13.$$s || this;

          
            
            if (button == null) {
              button = nil;
            };
            
            $writer = [$rb_minus(width, $rb_plus(last_x, button.$width()))];
            $send(button, 'x=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [$rb_minus($rb_plus($rb_minus(height, area_height), $rb_divide(area_height, 2)), $rb_divide(button.$height(), 2))];
            $send(button, 'y=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            return (last_x = $rb_plus(last_x, $rb_plus(button.$width(), padding)));}, $$13.$$s = self, $$13.$$arity = 1, $$13));
          
          $writer = [$rb_minus(width, $rb_plus($rb_divide(width, 2), $rb_divide(self.fullscreen_button.$width(), 2)))];
          $send(self.fullscreen_button, 'x=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = [$rb_minus(height, self.fullscreen_button.$height())];
          $send(self.fullscreen_button, 'y=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
        } else {
          
          area_width = $rb_divide($rb_minus(window.innerWidth, game_width), 2);
          area_height = game_height;
          self.$puts("" + "space: width " + (area_width) + " x height " + (area_height));
          
          $writer = [$rb_plus(self.touch_joystick.$radius(), self.touch_joystick.$radius())];
          $send(self.touch_joystick, 'x=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = [$rb_divide(game_height, 2)];
          $send(self.touch_joystick, 'y=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          padding = 10;
          last_x = 50;
          $send(self.touch_buttons.$reverse(), 'each', [], ($$14 = function(button){var self = $$14.$$s || this;

          
            
            if (button == null) {
              button = nil;
            };
            
            $writer = [$rb_minus(width, $rb_plus(last_x, button.$width()))];
            $send(button, 'x=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [$rb_minus($rb_divide(game_height, 2), $rb_divide(button.$height(), 2))];
            $send(button, 'y=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            return (last_x = $rb_plus(last_x, $rb_plus(button.$width(), padding)));}, $$14.$$s = self, $$14.$$arity = 1, $$14));
          
          $writer = [$rb_minus(width, self.fullscreen_button.$width())];
          $send(self.fullscreen_button, 'x=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = [0];
          $send(self.fullscreen_button, 'y=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
        };
        return nil;
      }, $GameRunner_reposition_touch_controls$12.$$arity = 0);
      
      Opal.def(self, '$resize_canvas', $GameRunner_resize_canvas$15 = function $$resize_canvas() {
        var self = this, width = nil, height = nil, $writer = nil;

        
        width = window.innerWidth;
        height = window.innerHeight;
        if ($truthy($rb_lt(width, height))) {
          
          $writer = [width / 128.0];
          $send(self.game, 'authorengine_scale=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
        } else {
          
          $writer = [height / 128.0];
          $send(self.game, 'authorengine_scale=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];
        };
        self.game.$authorengine_canvas().width  = width;
        self.game.$authorengine_canvas().height = height;
        self.game.$authorengine_canvas().style.width  = width;
        self.game.$authorengine_canvas().style.height = height;
        self.game.$authorengine_canvas_context().imageSmoothingEnabled = false;
        self.$reposition_touch_controls();
        self.game.$authorengine_canvas_context().clearRect(0, 0, window.innerWidth, window.innerHeight);
        return nil;
      }, $GameRunner_resize_canvas$15.$$arity = 0);
      
      Opal.def(self, '$build_spritesheet_and_sprites_list', $GameRunner_build_spritesheet_and_sprites_list$16 = function $$build_spritesheet_and_sprites_list() {
        var self = this, spritesheet_data = nil, width = nil, height = nil, size = nil, temp_canvas = nil, temp_canvas_context = nil, buffer = nil, image_data = nil;

        
        spritesheet_data = self.save_file.$sprites();
        width = spritesheet_data.$columns();
        height = spritesheet_data.$rows();
        size = 16;
        temp_canvas = document.createElement('canvas');
        temp_canvas_context = temp_canvas.getContext('2d');
        temp_canvas.width  = spritesheet_data.$columns();
        temp_canvas.height = spritesheet_data.$rows();
        buffer = new Uint8ClampedArray(spritesheet_data.$to_blob());
        image_data = new ImageData(buffer, width);
        temp_canvas_context.putImageData(image_data, 0, 0);
        self.spritesheet = new Image();
        self.spritesheet.onload = function() { self.$load_sprites() };
        return self.spritesheet.src = temp_canvas.toDataURL();
      }, $GameRunner_build_spritesheet_and_sprites_list$16.$$arity = 0);
      
      Opal.def(self, '$load_sprites', $GameRunner_load_sprites$17 = function $$load_sprites() {
        var $$18, self = this, spritesheet_data = nil, width = nil, height = nil, size = nil, temp_canvas = nil, temp_canvas_context = nil;

        
        spritesheet_data = self.save_file.$sprites();
        width = spritesheet_data.$columns();
        height = spritesheet_data.$rows();
        size = 16;
        temp_canvas = document.createElement('canvas');
        temp_canvas_context = temp_canvas.getContext('2d');
        temp_canvas.width  = size;
        temp_canvas.height = size;
        $send($rb_divide(height, size), 'times', [], ($$18 = function(y){var self = $$18.$$s || this, $$19;

        
          
          if (y == null) {
            y = nil;
          };
          return $send($rb_divide(width, size), 'times', [], ($$19 = function(x){var self = $$19.$$s || this;
            if (self.spritesheet == null) self.spritesheet = nil;
            if (self.sprites == null) self.sprites = nil;

          
            
            if (x == null) {
              x = nil;
            };
            temp_canvas_context.clearRect(0,0, size, size);
            temp_canvas_context.drawImage(self.spritesheet, $rb_times(x, size), $rb_times(y, size), size, size, 0, 0, size, size);
            return createImageBitmap(self.spritesheet, $rb_times(x, size), $rb_times(y, size), size, size).then(sprite => { self.sprites.$push(sprite) });}, $$19.$$s = self, $$19.$$arity = 1, $$19));}, $$18.$$s = self, $$18.$$arity = 1, $$18));
        return nil;
      }, $GameRunner_load_sprites$17.$$arity = 0);
      
      Opal.def(self, '$fullscreen_changed', $GameRunner_fullscreen_changed$20 = function $$fullscreen_changed() {
        var self = this;

        return self.$resize_canvas()
      }, $GameRunner_fullscreen_changed$20.$$arity = 0);
      return (Opal.def(self, '$show', $GameRunner_show$21 = function $$show(update_interval) {
        var self = this, $writer = nil;

        
        
        if (update_interval == null) {
          update_interval = $rb_divide(1000.0, 60);
        };
        if ($$($nesting, 'RUBY_ENGINE')['$==']("opal")) {
        } else {
          nil
        };
        window.addEventListener('resize', () => { self.$resize_canvas() });
        document.addEventListener('keydown', (event) => { ((self.show_touch_controls = false), (($writer = [event.key, true]), $send($$$($$$($$$($$($nesting, 'AuthorEngine'), 'Part'), 'OpalInput'), 'KEY_STATES'), '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)])) });
        document.addEventListener('keyup',   (event) => { (($writer = [event.key, false]), $send($$$($$$($$$($$($nesting, 'AuthorEngine'), 'Part'), 'OpalInput'), 'KEY_STATES'), '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]) });
        self.game.$authorengine_canvas().addEventListener('touchstart',  (event) => { ((self.show_touch_controls = true), self.$handle_touch_start(event)) });
        self.game.$authorengine_canvas().addEventListener('touchmove',   (event) => { self.$handle_touch_move(event) });
        self.game.$authorengine_canvas().addEventListener('touchcancel', (event) => { self.$handle_touch_cancel(event) });
        self.game.$authorengine_canvas().addEventListener('touchend',    (event) => { self.$handle_touch_end(event) });
        self.game.$authorengine_canvas().addEventListener('fullscreenchange',    () => { self.$fullscreen_changed() });
        document.getElementById('loading').style.display = "none";
        window.requestAnimationFrame(function() {self.$run_game()});
        return nil;
      }, $GameRunner_show$21.$$arity = -1), nil) && 'show';
    })($nesting[0], null, $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 1.0.0 */
Opal.modules["author_engine/opal"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$==']);
  
  if ($$($nesting, 'RUBY_ENGINE')['$==']("opal")) {
  } else {
    nil
  };
  self.$require("author_engine/opal.rb"+ '/../' + "game/common/parts/common");
  self.$require("author_engine/opal.rb"+ '/../' + "game/common/parts/collision_detection");
  self.$require("author_engine/opal.rb"+ '/../' + "game/common/parts/colors");
  self.$require("author_engine/opal.rb"+ '/../' + "game/opal/parts/graphics");
  self.$require("author_engine/opal.rb"+ '/../' + "game/opal/parts/input");
  self.$require("author_engine/opal.rb"+ '/../' + "collision_detection/collision_detection");
  self.$require("author_engine/opal.rb"+ '/../' + "sprite");
  self.$require("author_engine/opal.rb"+ '/../' + "game/game");
  self.$require("author_engine/opal.rb"+ '/../' + "save_file");
  self.$require("author_engine/opal.rb"+ '/../' + "game/opal/touch_handler");
  self.$require("author_engine/opal.rb"+ '/../' + "game/opal/touch_button");
  self.$require("author_engine/opal.rb"+ '/../' + "game/opal/touch_joystick");
  return self.$require("author_engine/opal.rb"+ '/../' + "game/opal/game_runner");
};

/* Generated by Opal 1.0.0 */
(function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$require', '$show', '$new']);
  
  self.$require("author_engine/opal");
  var callback = function(){
  $$$($$($nesting, 'AuthorEngine'), 'GameRunner').$new(projectString).$show()
};

if (
    document.readyState === "complete" ||
    (document.readyState !== "loading" && !document.documentElement.doScroll)
) {
  callback();
} else {
  document.addEventListener("DOMContentLoaded", callback);
};
})(Opal);
